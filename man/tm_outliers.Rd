% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_outliers.R
\name{tm_outliers}
\alias{tm_outliers}
\title{\code{teal} module: Outliers analysis}
\usage{
tm_outliers(
  label = "Outliers Module",
  outlier_var,
  categorical_var = NULL,
  ggtheme = c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void"),
  ggplot2_args = teal.widgets::ggplot2_args(),
  plot_height = c(600, 200, 2000),
  plot_width = NULL,
  pre_output = NULL,
  post_output = NULL,
  transformators = list(),
  decorators = list()
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module or module group.
For \code{modules()} defaults to \code{"root"}. See \code{Details}.}

\item{outlier_var}{(\code{picks} or \code{list} of multiple \code{picks})
Specifies variable(s) to be analyzed for outliers.}

\item{categorical_var}{(\code{picks} or \code{list} of multiple \code{picks}) optional,
specifies the categorical variable(s) to split the selected outlier variables on.}

\item{ggtheme}{(\code{character}) optional, \code{ggplot2} theme to be used by default. Defaults to \code{"gray"}.}

\item{ggplot2_args}{(\code{ggplot2_args}) optional, object created by \code{\link[teal.widgets:ggplot2_args]{teal.widgets::ggplot2_args()}} with settings for all the plots or named list of \code{ggplot2_args} objects for plot-specific settings. The argument is merged with options variable \code{teal.ggplot2_args} and default module setup.

List names should match the following: \code{c("default", "Boxplot", "Density Plot", "Cumulative Distribution Plot")}.

For more details see the vignette: \code{vignette("custom-ggplot2-arguments", package = "teal.widgets")}.}

\item{plot_height}{(\code{numeric}) optional, specifies the plot height as a three-element vector of
\code{value}, \code{min}, and \code{max} intended for use with a slider UI element.}

\item{plot_width}{(\code{numeric}) optional, specifies the plot width as a three-element vector of
\code{value}, \code{min}, and \code{max} for a slider encoding the plot width.}

\item{pre_output}{(\code{shiny.tag}) optional, text or UI element to be displayed before the module's output,
providing context or a title.
with text placed before the output to put the output into context. For example a title.}

\item{post_output}{(\code{shiny.tag}) optional, text or UI element to be displayed after the module's output,
adding context or further instructions. Elements like \code{shiny::helpText()} are useful.}

\item{transformators}{(\code{list} of \code{teal_transform_module}) that will be applied to transform module's data input.
To learn more check \code{vignette("transform-input-data", package = "teal")}.}

\item{decorators}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
(named \code{list} of lists of \code{teal_transform_module}) optional,
decorator for tables or plots included in the module output reported.
The decorators are applied to the respective output objects.}
}
\value{
Object of class \code{teal_module} to be used in \code{teal} applications.
}
\description{
Module to analyze and identify outliers using different methods
such as IQR, Z-score, and Percentiles, and offers visualizations including
box plots, density plots, and cumulative distribution plots to help interpret the outliers.
}
\section{Decorating Module}{


This module generates the following objects, which can be modified in place using decorators:
\itemize{
\item \code{box_plot} (\code{ggplot})
\item \code{density_plot} (\code{ggplot})
\item \code{cumulative_plot} (\code{ggplot})
}

A Decorator is applied to the specific output using a named list of \code{teal_transform_module} objects.
The name of this list corresponds to the name of the output to which the decorator is applied.
See code snippet below:

\if{html}{\out{<div class="sourceCode">}}\preformatted{tm_outliers(
   ..., # arguments for module
   decorators = list(
     box_plot = teal_transform_module(...), # applied only to `box_plot` output
     density_plot = teal_transform_module(...), # applied only to `density_plot` output
     cumulative_plot = teal_transform_module(...) # applied only to `cumulative_plot` output
   )
)
}\if{html}{\out{</div>}}

For additional details and examples of decorators, refer to the vignette
\code{vignette("decorate-module-output", package = "teal.modules.general")}.

To learn more please refer to the vignette
\code{vignette("transform-module-output", package = "teal")} or the \code{\link[teal:teal_transform_module]{teal::teal_transform_module()}} documentation.
}

\examples{

# general data example
data <- teal_data()
data <- within(data, {
  CO2 <- CO2
  CO2[["primary_key"]] <- seq_len(nrow(CO2))
})
join_keys(data) <- join_keys(join_key("CO2", "CO2", "primary_key"))

vars <- choices_selected(variable_choices(data[["CO2"]], c("Plant", "Type", "Treatment")))

app <- init(
  data = data,
  modules = modules(
    tm_outliers(
      outlier_var = list(
        teal.transform::picks(
          datasets("CO2"),
          teal.transform::variables(
            choices = variable_choices(data[["CO2"]], c("conc", "uptake")),
            selected = "uptake",
            multiple = FALSE,
            fixed = FALSE
          ),
          teal.transform::values()
        )
      ),
      categorical_var = list(
        teal.transform::picks(
          datasets("CO2"),
          teal.transform::variables(),
          values(
            vars = vars,
            choices = value_choices(data[["CO2"]], vars$selected),
            selected = value_choices(data[["CO2"]], vars$selected),
            multiple = TRUE
          )
        )
      )
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}


# CDISC data example
data <- teal_data()
data <- within(data, {
  ADSL <- teal.data::rADSL
})
join_keys(data) <- default_cdisc_join_keys[names(data)]

fact_vars_adsl <- names(Filter(isTRUE, sapply(data[["ADSL"]], is.factor)))
vars <- choices_selected(variable_choices(data[["ADSL"]], fact_vars_adsl))


app <- init(
  data = data,
  modules = modules(
    tm_outliers(
      outlier_var = list(
        teal.transform::picks(
          datasets("ADSL"),
          teal.transform::variables(
            choices = variable_choices(data[["ADSL"]], c("AGE", "BMRKR1")),
            selected = "AGE",
            multiple = FALSE,
            fixed = FALSE
          ),
          teal.transform::values()
        )
      ),
      categorical_var = list(
        teal.transform::picks(
          datasets("ADSL"),
          teal.transform::variables(),
          values(
            vars = vars,
            choices = value_choices(data[["ADSL"]], vars$selected),
            selected = value_choices(data[["ADSL"]], vars$selected),
            multiple = TRUE
          )
        )
      )
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
\section{Examples in Shinylive}{
\describe{
  \item{example-1}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokrcQAxLqkQ11XfxQpFC6cAAesKgiSoHBBsZc1AD6sVA2MUEhRroA7rSkABYq7Km4uiBKuroAwgDyAEzxNQ2VzfXAwApgqIy0MCysSQDWcKxdALrjTaJwAI5JIhDsEIxEOex19XKKEAC+OwBWRCrDo6IlmbbZRycjrOc3EKccXZtdZa8teLpdPX0Dzy623cWhYoiaBAKxwIYiSMxEGjg-HYoN6UHoIiSkOhYguwQ6n3qE3GZQI7C6AAVqFAyO8fmA7KxUHA6V07Iw4EF4LSwNsdko0Kgmip8uSIFVUroALwBTK4Vp8IQicEyxXCXGtKqkGBJIiCUh0GTnTVVXR6g20GRJVHS3R0USkMWm526RIYUjMCCiExERgwRCIVC0AhDY3il3O1IzUjGsBvXny8MRrWcngemne33+xCo2jo5VO5PO7HBsS23P5uBYqGl86pAlxr6TUnkwgkAissCCVDBEZAuSJovO+FwRH8W1dbu9ll4E1FmDCTRRPQygBiAEEADIAZWcg6HVRMtDCSNtG53riTyYHc5dbvTXp9foDoOoglxOyLn5dN6vVQIQRwBIvrBtw1osLa9qOreKbcO6nqZs+gbBqGhZFlGcAxq28a-ge94IU+2YVhiH77kWr7vmGB5VKiKq6LRZFDiWMJ0RRVbMbi9adI2RJgM29FggAJCOY64dRInkOOMpsdWOJ1pkDbxvxtHCXACKSWJB4LtQS4iLaDguDBprfhGJnGSa347DstAmLo7AqOQzCWDoNi2BU4aiEUECsOu6DsIKgmCLQZQBTMjA6IwOy7EoYC7OMQA}{Open in Shinylive}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokrcQAxLqkQ11XfxQpFC6cAAesKgiSoHBBsZc1AD6sVA2MUEhRroA7rSkABYq7Km4uiBKuroAwgDyAEzxNQ2VzfXAwApgqIy0MCysSQDWcKxdALrjTaJwAI5JIhDsEIxEOex19XKKEAC+OwBWRCrDo6IlmbbZRycjrOc3EKccXZtdZa8teLpdPX0Dzy623cWhYoiaBAKxwIYiSMxEGjg-HYoN6UHoIiSkOhYguwQ6n3qE3GZQI7C6AAVqFAyO8fmA7KxUHA6V07Iw4EF4LSwNsdko0Kgmip8uSIFVUroALwBTK4Vp8IQicEyxXCXGtKqkGBJIiCUh0GTnTVVXR6g20GRJVHS3R0USkMWm526RIYUjMCCiExERgwRCIVC0AhDY3il3O1IzUjGsBvXny8MRrWcngemne33+xCo2jo5VO5PO7HBsS23P5uBYqGl86pAlxr6TUnkwgkAissCCVDBEZAuSJovO+FwRH8W1dbu9ll4E1FmDCTRRPQygBiAEEADIAZWcg6HVRMtDCSNtG53riTyYHc5dbvTXp9foDoOoglxOyLn5dN6vVQIQRwBIvrBtw1osLa9qOreKbcO6nqZs+gbBqGhZFlGcAxq28a-ge94IU+2YVhiH77kWr7vmGB5VKiKq6LRZFDiWMJ0RRVbMbi9adI2RJgM29FggAJCOY64dRInkOOMpsdWOJ1pkDbxvxtHCXACKSWJB4LtQS4iLaDguDBprfhGJnGSa347DstAmLo7AqOQzCWDoNi2BU4aiEUECsOu6DsIKgmCLQZQBTMjA6IwOy7EoYC7OMQA" style="height: 800px; width: 100vw; max-width: 1400px; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: absolute; left: 50\%; margin-top: 30px; transform: translateX(-50\%); z-index: 1"></iframe>}}
    \if{html}{\out{<a style='height: 800px; display: block;'></a>}}
  }
  \item{example-2}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokrcQAxLoDCAEQCSAMreuvxQpFC6cAAesKgiSmERBsZc1AD6SVA2ieGRRroA7rSkABYq7Fm4uiBKuroAgr6BADIpumkYWYiIjE2tSgC+ihAAVkQq6QDWcKyilXm2BfxwJlDCpOkE-LSiBOnjkzNzwNDw81lyALruaxrpWiyi6VD8otTtZ2LsAGK01ORGOxdg4XNVRGh4hwssBgAowP0WvCrldqrsMHdSERGHJcUpHoxRO0CKUJgQxOlRHARBo4Px2ATaFB6CItqTaOSLnlYfDEcjUaZ1JsCc9Xu88RB3JD2ioSuw6qE8roALyKiK4BV8IQiImqrXCb4K+qkGDpIiCUh0GTzI31XTmy20GQPFgq3R0USkeUQO2+jpwbgYUjMCCiEzYmA9VAcqY2n1+31ZKmkG0I5pIsByDXxhPGgM8YNQUPhxiRxCM5k6725v0ksliN0VllwNn1rkRHlpgZgFHVAjyhEAcVceF08IAQgBZLAAaSwAEZ4bjszXfVSaeR+G7ecP4SvV-UYBtaPE9Kqfg0WoFnPuDyZaNE6W6L1fXDnc1nbQnOoXixGeo81CCN8Iw1qBfqfu+9QEOEcASNiHLcC6jBuh6XpfnaP4hmG-6INGBCxtWq5JnAKYDnyma3rmWFFjhpYASwTLNvMkEHoBwFxge9Qio2TxUTWdYcg2qrsS2gmcgsHZwl2Ga9roIoACTrnAtL8KxXHKapvFAWJ7ISTC0kUXJimaZu6kHkeAIniIbqgm+B7gQmjl2s54EjCMtAmLowKqMwlg6DYti1PGojlBArANOg7CQgpgi0NUMVUowOg4kMShgIMVxAA}{Open in Shinylive}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokrcQAxLoDCAEQCSAMreuvxQpFC6cAAesKgiSmERBsZc1AD6SVA2ieGRRroA7rSkABYq7Fm4uiBKuroAgr6BADIpumkYWYiIjE2tSgC+ihAAVkQq6QDWcKyilXm2BfxwJlDCpOkE-LSiBOnjkzNzwNDw81lyALruaxrpWiyi6VD8otTtZ2LsAGK01ORGOxdg4XNVRGh4hwssBgAowP0WvCrldqrsMHdSERGHJcUpHoxRO0CKUJgQxOlRHARBo4Px2ATaFB6CItqTaOSLnlYfDEcjUaZ1JsCc9Xu88RB3JD2ioSuw6qE8roALyKiK4BV8IQiImqrXCb4K+qkGDpIiCUh0GTzI31XTmy20GQPFgq3R0USkeUQO2+jpwbgYUjMCCiEzYmA9VAcqY2n1+31ZKmkG0I5pIsByDXxhPGgM8YNQUPhxiRxCM5k6725v0ksliN0VllwNn1rkRHlpgZgFHVAjyhEAcVceF08IAQgBZLAAaSwAEZ4bjszXfVSaeR+G7ecP4SvV-UYBtaPE9Kqfg0WoFnPuDyZaNE6W6L1fXDnc1nbQnOoXixGeo81CCN8Iw1qBfqfu+9QEOEcASNiHLcC6jBuh6XpfnaP4hmG-6INGBCxtWq5JnAKYDnyma3rmWFFjhpYASwTLNvMkEHoBwFxge9Qio2TxUTWdYcg2qrsS2gmcgsHZwl2Ga9roIoACTrnAtL8KxXHKapvFAWJ7ISTC0kUXJimaZu6kHkeAIniIbqgm+B7gQmjl2s54EjCMtAmLowKqMwlg6DYti1PGojlBArANOg7CQgpgi0NUMVUowOg4kMShgIMVxAA" style="height: 800px; width: 100vw; max-width: 1400px; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: absolute; left: 50\%; margin-top: 30px; transform: translateX(-50\%); z-index: 1"></iframe>}}
    \if{html}{\out{<a style='height: 800px; display: block;'></a>}}
  }
}
}

