% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_outliers.R
\name{tm_outliers}
\alias{tm_outliers}
\title{\code{teal} module: Outliers analysis}
\usage{
tm_outliers(
  label = "Outliers Module",
  outlier_var,
  categorical_var = NULL,
  ggtheme = c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void"),
  ggplot2_args = teal.widgets::ggplot2_args(),
  plot_height = c(600, 200, 2000),
  plot_width = NULL,
  pre_output = NULL,
  post_output = NULL,
  table_decorator = teal_transform_module(),
  boxplot_decorator = teal_transform_module(),
  violin_decorator = teal_transform_module(),
  density_decorator = teal_transform_module(),
  cum_dist_decorator = teal_transform_module()
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module or module group.
For \code{modules()} defaults to \code{"root"}. See \code{Details}.}

\item{outlier_var}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Specifies variable(s) to be analyzed for outliers.}

\item{categorical_var}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec}) optional,
specifies the categorical variable(s) to split the selected outlier variables on.}

\item{ggtheme}{(\code{character}) optional, \code{ggplot2} theme to be used by default. Defaults to \code{"gray"}.}

\item{ggplot2_args}{(\code{ggplot2_args}) optional, object created by \code{\link[teal.widgets:ggplot2_args]{teal.widgets::ggplot2_args()}}
with settings for all the plots or named list of \code{ggplot2_args} objects for plot-specific settings.
The argument is merged with options variable \code{teal.ggplot2_args} and default module setup.

List names should match the following: \code{c("default", "Boxplot","Density Plot","Cumulative Distribution Plot")}.

For more details see the vignette: \code{vignette("custom-ggplot2-arguments", package = "teal.widgets")}.}

\item{plot_height}{(\code{numeric}) optional, specifies the plot height as a three-element vector of
\code{value}, \code{min}, and \code{max} intended for use with a slider UI element.}

\item{plot_width}{(\code{numeric}) optional, specifies the plot width as a three-element vector of
\code{value}, \code{min}, and \code{max} for a slider encoding the plot width.}

\item{pre_output}{(\code{shiny.tag}) optional, text or UI element to be displayed before the module's output,
providing context or a title.
with text placed before the output to put the output into context. For example a title.}

\item{post_output}{(\code{shiny.tag}) optional, text or UI element to be displayed after the module's output,
adding context or further instructions. Elements like \code{shiny::helpText()} are useful.}

\item{table_decorator}{(\code{list} of \code{teal_transform_module}) optional,
decorator for the table.}

\item{boxplot_decorator}{(\code{list} of \code{teal_transform_module}) optional,
decorator for the box plot.}

\item{violin_decorator}{(\code{list} of \code{teal_transform_module}) optional,
decorator for the violin plot.}

\item{density_decorator}{(\code{list} of \code{teal_transform_module}) optional,
decorator for the density plot.}

\item{cum_dist_decorator}{(\code{list} of \code{teal_transform_module}) optional,
decorator for the cumulative distribution plot.}
}
\value{
Object of class \code{teal_module} to be used in \code{teal} applications.
}
\description{
Module to analyze and identify outliers using different methods
such as IQR, Z-score, and Percentiles, and offers visualizations including
box plots, density plots, and cumulative distribution plots to help interpret the outliers.
}
\section{Decorating \code{tm_outliers}}{


This module creates below objects that can be modified with decorators:
\itemize{
\item \code{table} (\code{data.frame})
\item \code{plot} (\code{ggplot2})
}
}

\section{Decorating Module Outputs}{


Decorating module outputs involves modifying the tables and plots generated by a module. This module provides the
ability to execute custom R code to adjust the visual or structural properties of objects displayed within the
application.

The code specified in \code{\link{teal_transform_module}} is executed prior to rendering the outputs in the application. This
allows developers to modify attributes such as titles, labels, sizes, limits, and other features of rendered tables
and plots. However, decorators should be applied with careful consideration of the module's internal object names
to ensure compatibility.

To customize an output, developers need to identify the name of the table or plot to be modified within the
\code{teal_transform_module}. This requires specifying a \code{server} function that modifies the targeted object in the
\code{data} object (of class \code{teal_data}). Since each module may use different internal object names or types for its
outputs, there is no universal code to achieve this. However, \code{teal} provides convenient wrappers to simplify the
process of decorating module outputs:
\itemize{
\item \strong{Decorator as a Language/Expression}: Specify a simple R expression to modify the object of interest.
For example,\code{plot <- plot + ggtitle("Custom Title")}. The expression must be valid and compatible with the module's
internal environment.
\item \strong{Decorator as a Function}: Provide a function that accepts the output object and modifies it as desired.
When using this approach, the function does not need to align with the moduleâ€™s internal naming conventions for its
objects.
}

For additional details and examples of decorators, refer to the vignette
\code{vignette("decorate-modules-output", package = "teal")} or the \code{\link[=teal_transform_module]{teal_transform_module()}} documentation.
}

\examples{

module_decorator <- teal_transform_module(
  server = make_teal_transform_server(
    expression({
      plot <- plot + ggplot2::ggtitle("A new title")
    })
  )
)

# general data example
data <- teal_data()
data <- within(data, {
  CO2 <- CO2
  CO2[["primary_key"]] <- seq_len(nrow(CO2))
})
join_keys(data) <- join_keys(join_key("CO2", "CO2", "primary_key"))

vars <- choices_selected(variable_choices(data[["CO2"]], c("Plant", "Type", "Treatment")))

app <- init(
  data = data,
  modules = modules(
    tm_outliers(
      outlier_var = list(
        data_extract_spec(
          dataname = "CO2",
          select = select_spec(
            label = "Select variable:",
            choices = variable_choices(data[["CO2"]], c("conc", "uptake")),
            selected = "uptake",
            multiple = FALSE,
            fixed = FALSE
          )
        )
      ),
      categorical_var = list(
        data_extract_spec(
          dataname = "CO2",
          filter = filter_spec(
            vars = vars,
            choices = value_choices(data[["CO2"]], vars$selected),
            selected = value_choices(data[["CO2"]], vars$selected),
            multiple = TRUE
          )
        )
      ),
      boxplot_decorator = module_decorator
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}


module_decorator <- teal_transform_module(
  server = make_teal_transform_server(
    expression({
      plot <- plot + ggplot2::ggtitle("A new title")
    })
  )
)

# CDISC data example
data <- teal_data()
data <- within(data, {
  ADSL <- rADSL
})
join_keys(data) <- default_cdisc_join_keys[names(data)]

fact_vars_adsl <- names(Filter(isTRUE, sapply(data[["ADSL"]], is.factor)))
vars <- choices_selected(variable_choices(data[["ADSL"]], fact_vars_adsl))



app <- init(
  data = data,
  modules = modules(
    tm_outliers(
      outlier_var = list(
        data_extract_spec(
          dataname = "ADSL",
          select = select_spec(
            label = "Select variable:",
            choices = variable_choices(data[["ADSL"]], c("AGE", "BMRKR1")),
            selected = "AGE",
            multiple = FALSE,
            fixed = FALSE
          )
        )
      ),
      categorical_var = list(
        data_extract_spec(
          dataname = "ADSL",
          filter = filter_spec(
            vars = vars,
            choices = value_choices(data[["ADSL"]], vars$selected),
            selected = value_choices(data[["ADSL"]], vars$selected),
            multiple = TRUE
          )
        )
      ),
      boxplot_decorator = module_decorator
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
\section{Examples in Shinylive}{
\describe{
  \item{example-1}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokrcQ+QkQH1+cYsykRIwGxlzU3qTMEKImwTDensJw7Eq6uqIyOiEAvLowUADWcJFw3JHRsfHemYzZqRDp6XAAHqiMYqJWEOwgaU3pqNREpKG6QyO6ANS6EhITpABMiIhzmqQiqWAAgroQcADuuusiCmCKjU0AvhfpFxdKAMSz0rK6-FCkULqtsENwSg+XzG4V8nygNkB4LGB1opAAFip2ECoLhdH1LgBhADyizGOMW-QJwGAZ3atAKbG8xVYZwAunSxpkAI7eEQ9CCMIgHdgEuQXG5KABWRBU1LgrFEyPBtiMuhFYppUoVEHFHDOBLOaI1uK1ujJjApLFYarO-PcWhYojGBHhooIYhqcBEGjg-HYlsNUHoPlt9rE0q+JJ1hLADLRBC2AAVqFAyHqznZWKgAXh9WA7B1PvB4+dzRAlGhUGMVHCGukUbo8ijcP0kiJrXl6wH+ulSAkiIINrQZFLW01O92ZN5PVXdHRRKRywMmijvK0oupSDUU5H+zP3uDoPAxyGteuZ5kXaM8kf-MvRKvpxuBrH6M7d2AAMrO8+6T20b0iRD7y43pp+rQDqNu+LCfj6JSAcBgZQMGYCamGdIRlsxAWAmYCCKgXzFGaci1n+-4ZK+rr8I+mHYam+GEU0MDCJo-xjgAYtsAAyT7OFR1GmLQLRukxrHsQeAy3DeInCZxAwEJ8cASMEQHlKOeQTlOQmbl884tIuGgrv4143ii256Hke54Kp6QmLQ1DkLk3FWcOl66WZTSeiBLkSYRUFiGOlrUIIkF2kBAYonBCHhqBjCiAAJGeJF4U56QxeQpF5D5fneJ5UrBaS8G6ohaIudFxFJXFBH-rRVm0AxeQOC4TliTO9V3O56T0EQbTDMufgBJ8wRjs2vj+MEPWMP2In3EotAmLo7AqNZS7aCk-Lov0oiIhArDbOg7BFpFgi0GiO21NkApKGAVx0kAA}{Open in Shinylive}
    \if{html}{\out{<script type="text/javascript">$(function() {  var if_pkgdown = [...document.scripts].filter(x => x.src.includes("pkgdown.js")).length > 0;  if (if_pkgdown) {    $("iframe.iframe_shinylive").css("width", "150\%");  }});</script>}}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokrcQ+QkQH1+cYsykRIwGxlzU3qTMEKImwTDensJw7Eq6uqIyOiEAvLowUADWcJFw3JHRsfHemYzZqRDp6XAAHqiMYqJWEOwgaU3pqNREpKG6QyO6ANS6EhITpABMiIhzmqQiqWAAgroQcADuuusiCmCKjU0AvhfpFxdKAMSz0rK6-FCkULqtsENwSg+XzG4V8nygNkB4LGB1opAAFip2ECoLhdH1LgBhADyizGOMW-QJwGAZ3atAKbG8xVYZwAunSxpkAI7eEQ9CCMIgHdgEuQXG5KABWRBU1LgrFEyPBtiMuhFYppUoVEHFHDOBLOaI1uK1ujJjApLFYarO-PcWhYojGBHhooIYhqcBEGjg-HYlsNUHoPlt9rE0q+JJ1hLADLRBC2AAVqFAyHqznZWKgAXh9WA7B1PvB4+dzRAlGhUGMVHCGukUbo8ijcP0kiJrXl6wH+ulSAkiIINrQZFLW01O92ZN5PVXdHRRKRywMmijvK0oupSDUU5H+zP3uDoPAxyGteuZ5kXaM8kf-MvRKvpxuBrH6M7d2AAMrO8+6T20b0iRD7y43pp+rQDqNu+LCfj6JSAcBgZQMGYCamGdIRlsxAWAmYCCKgXzFGaci1n+-4ZK+rr8I+mHYam+GEU0MDCJo-xjgAYtsAAyT7OFR1GmLQLRukxrHsQeAy3DeInCZxAwEJ8cASMEQHlKOeQTlOQmbl884tIuGgrv4143ii256Hke54Kp6QmLQ1DkLk3FWcOl66WZTSeiBLkSYRUFiGOlrUIIkF2kBAYonBCHhqBjCiAAJGeJF4U56QxeQpF5D5fneJ5UrBaS8G6ohaIudFxFJXFBH-rRVm0AxeQOC4TliTO9V3O56T0EQbTDMufgBJ8wRjs2vj+MEPWMP2In3EotAmLo7AqNZS7aCk-Lov0oiIhArDbOg7BFpFgi0GiO21NkApKGAVx0kAA" style="height: 800px; width: 100\%; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: relative; z-index: 1"></iframe>}}
  }
  \item{example-2}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokrcQ+QkQH1+cYsykRIwGxlzU3qTMEKImwTDensJw7Eq6uqIyOiEAvLowUADWcJFw3JHRsfHemYzZqRDp6XAAHqiMYqJWEOwgaU3pqNREpKG6QyO6ANS6EhITpABMiIhzmqQiqWAAgroQcADuuusiCmCKjU0AvhfpFxdKAMS6AMIAIgCSAMovuvxQpCgulasCGcCU-0BY3CvgBUBsELhYwOtFIAAsVOxIVBcLo+pdtm8vgAZMaMQkkpQ3JQAKyIKm8xVYoixcNsRj+cBMUGEpG8BH4tFEBG8dIZTNEwGg8BZ2LkAF13NyNN4tCxRN4oPxRNQxtKxOwAGK0ajkRjsIUOFy40RoIYcbHAYBnCnEs7y+W4oUYZVBRhyANKNWMURjAho+kEMQ1OAiDRwfjsYO0KD0HzhyMGx3OnZEt1gD2432q9Wa7XyB4Qdx2sYqVENdLY3R5bG4fpJEShvIdg39dKkBJEQQbWgyFl9ppDkcyEu5XR0USkBsDJrY7ytKLqPmiVD+Zcr1dw-XN3QuvNnNuXA-pTJx0Z5W-+be7gj76-paip2Mns5fWNP3Rk1TEREAvCd3wzWgoy7QCWBTNMSkg6DWUBJ0z0pAtPV0V8XQAcVcPBTzAAAhABZLAAGksAARjOANL3fAZH3jfgfx2fCwKvRiYF5WgwRPQ1tmJL5nAYxj0hMWgWgTAShJE8CV1ua8lIGOQxIGAgATgCRgig8pgxPBclwUxs4XXFpNxVHc9xMw9AWPPJ0PzdTr0k00ZBPNyzRqF833fYMYIClyIIjKCxBPNVqEERDQuQ7MnPdLCAoAEmY8h+DU2ymP-FiIu4aL+VirM4TQ3MMMLWCQ1SnL0syrj3x400+JEE8rVcerFNslSmjqg96CINphj5PwAgBYITx7Xx-GCMbGAnJT7iUWgTF0C1VGYSwdBsWx8RvDEIFYbZ0HYO1ksEWhcVO2psguK4lDAK55SAA}{Open in Shinylive}
    \if{html}{\out{<script type="text/javascript">$(function() {  var if_pkgdown = [...document.scripts].filter(x => x.src.includes("pkgdown.js")).length > 0;  if (if_pkgdown) {    $("iframe.iframe_shinylive").css("width", "150\%");  }});</script>}}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokrcQ+QkQH1+cYsykRIwGxlzU3qTMEKImwTDensJw7Eq6uqIyOiEAvLowUADWcJFw3JHRsfHemYzZqRDp6XAAHqiMYqJWEOwgaU3pqNREpKG6QyO6ANS6EhITpABMiIhzmqQiqWAAgroQcADuuusiCmCKjU0AvhfpFxdKAMS6AMIAIgCSAMovuvxQpCgulasCGcCU-0BY3CvgBUBsELhYwOtFIAAsVOxIVBcLo+pdtm8vgAZMaMQkkpQ3JQAKyIKm8xVYoixcNsRj+cBMUGEpG8BH4tFEBG8dIZTNEwGg8BZ2LkAF13NyNN4tCxRN4oPxRNQxtKxOwAGK0ajkRjsIUOFy40RoIYcbHAYBnCnEs7y+W4oUYZVBRhyANKNWMURjAho+kEMQ1OAiDRwfjsYO0KD0HzhyMGx3OnZEt1gD2432q9Wa7XyB4Qdx2sYqVENdLY3R5bG4fpJEShvIdg39dKkBJEQQbWgyFl9ppDkcyEu5XR0USkBsDJrY7ytKLqPmiVD+Zcr1dw-XN3QuvNnNuXA-pTJx0Z5W-+be7gj76-paip2Mns5fWNP3Rk1TEREAvCd3wzWgoy7QCWBTNMSkg6DWUBJ0z0pAtPV0V8XQAcVcPBTzAAAhABZLAAGksAARjOANL3fAZH3jfgfx2fCwKvRiYF5WgwRPQ1tmJL5nAYxj0hMWgWgTAShJE8CV1ua8lIGOQxIGAgATgCRgig8pgxPBclwUxs4XXFpNxVHc9xMw9AWPPJ0PzdTr0k00ZBPNyzRqF833fYMYIClyIIjKCxBPNVqEERDQuQ7MnPdLCAoAEmY8h+DU2ymP-FiIu4aL+VirM4TQ3MMMLWCQ1SnL0syrj3x400+JEE8rVcerFNslSmjqg96CINphj5PwAgBYITx7Xx-GCMbGAnJT7iUWgTF0C1VGYSwdBsWx8RvDEIFYbZ0HYO1ksEWhcVO2psguK4lDAK55SAA" style="height: 800px; width: 100\%; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: relative; z-index: 1"></iframe>}}
  }
}
}

