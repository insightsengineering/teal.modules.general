% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_response.R
\name{tm_g_response}
\alias{tm_g_response}
\title{\code{teal} module: Response plot}
\usage{
tm_g_response(
  label = "Response Plot",
  response = teal.transform::picks(teal.transform::datasets(),
    teal.transform::variables(choices = teal.transform::is_categorical(min.len = 2,
    max.len = 10)), teal.transform::values()),
  x,
  row_facet = NULL,
  col_facet = NULL,
  coord_flip = FALSE,
  count_labels = TRUE,
  rotate_xaxis_labels = FALSE,
  freq = FALSE,
  plot_height = c(600, 400, 5000),
  plot_width = NULL,
  ggtheme = c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void"),
  ggplot2_args = teal.widgets::ggplot2_args(),
  pre_output = NULL,
  post_output = NULL,
  transformators = list(),
  decorators = list()
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module or module group.
For \code{modules()} defaults to \code{"root"}. See \code{Details}.}

\item{response}{(\code{picks})
Which variable to use as the response.
The \code{picks} must not allow multiple variable selection in this case.}

\item{x}{(\code{picks} )
Specifies which variable to use on the X-axis of the response plot.
The \code{picks} must not allow multiple selection in this case.}

\item{row_facet}{(\code{picks})
optional specification of the data variable(s) to use for faceting rows.}

\item{col_facet}{(\code{picks})
optional specification of the data variable(s) to use for faceting columns.}

\item{coord_flip}{(\code{logical(1)})
Indicates whether to flip coordinates between \code{x} and \code{response}.
The default value is \code{FALSE} and it will show the \code{x} variable on the x-axis
and the \code{response} variable on the y-axis.}

\item{count_labels}{(\code{logical(1)})
Indicates whether to show count labels.
Defaults to \code{TRUE}.}

\item{rotate_xaxis_labels}{(\code{logical}) optional, whether to rotate plot X axis labels. Does not
rotate by default (\code{FALSE}).}

\item{freq}{(\code{logical(1)})
Indicates whether to display frequency (\code{TRUE}) or density (\code{FALSE}).
Defaults to density (\code{FALSE}).}

\item{plot_height}{(\code{numeric}) optional, specifies the plot height as a three-element vector of
\code{value}, \code{min}, and \code{max} intended for use with a slider UI element.}

\item{plot_width}{(\code{numeric}) optional, specifies the plot width as a three-element vector of
\code{value}, \code{min}, and \code{max} for a slider encoding the plot width.}

\item{ggtheme}{(\code{character}) optional, \code{ggplot2} theme to be used by default. Defaults to \code{"gray"}.}

\item{ggplot2_args}{(\code{ggplot2_args}) object created by \code{\link[teal.widgets:ggplot2_args]{teal.widgets::ggplot2_args()}}
with settings for the module plot.
The argument is merged with options variable \code{teal.ggplot2_args} and default module setup.

For more details see the vignette: \code{vignette("custom-ggplot2-arguments", package = "teal.widgets")}}

\item{pre_output}{(\code{shiny.tag}) optional, text or UI element to be displayed before the module's output,
providing context or a title.
with text placed before the output to put the output into context. For example a title.}

\item{post_output}{(\code{shiny.tag}) optional, text or UI element to be displayed after the module's output,
adding context or further instructions. Elements like \code{shiny::helpText()} are useful.}

\item{transformators}{(\code{list} of \code{teal_transform_module}) that will be applied to transform module's data input.
To learn more check \code{vignette("transform-input-data", package = "teal")}.}

\item{decorators}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
(named \code{list} of lists of \code{teal_transform_module}) optional,
decorator for tables or plots included in the module output reported.
The decorators are applied to the respective output objects.}
}
\value{
Object of class \code{teal_module} to be used in \code{teal} applications.
}
\description{
Generates a response plot for a given \code{response} and \code{x} variables.
This module allows users customize and add annotations to the plot depending
on the module's arguments.
It supports showing the counts grouped by other variable facets (by row / column),
swapping the coordinates, show count annotations and displaying the response plot
as frequency or density.
}
\note{
For more examples, please see the vignette "Using response plot" via
\code{vignette("using-response-plot", package = "teal.modules.general")}.
}
\section{Decorating Module}{


This module generates the following objects, which can be modified in place using decorators:
\itemize{
\item \code{plot} (\code{ggplot})
}

A Decorator is applied to the specific output using a named list of \code{teal_transform_module} objects.
The name of this list corresponds to the name of the output to which the decorator is applied.
See code snippet below:

\if{html}{\out{<div class="sourceCode">}}\preformatted{tm_g_response(
   ..., # arguments for module
   decorators = list(
     plot = teal_transform_module(...) # applied to the `plot` output
   )
)
}\if{html}{\out{</div>}}

For additional details and examples of decorators, refer to the vignette
\code{vignette("decorate-module-output", package = "teal.modules.general")}.

To learn more please refer to the vignette
\code{vignette("transform-module-output", package = "teal")} or the \code{\link[teal:teal_transform_module]{teal::teal_transform_module()}} documentation.
}

\examples{
# general data example
data <- teal_data()
data <- within(data, {
  require(nestcolor)
  mtcars <- mtcars
  for (v in c("cyl", "vs", "am", "gear")) {
    mtcars[[v]] <- as.factor(mtcars[[v]])
  }
})

app <- init(
  data = data,
  modules = modules(
    tm_g_response(
      label = "Response Plots",
      response = picks(
        datasets("mtcars"),
        variables(
          choices = c("cyl", "gear"),
          selected = "cyl",
          multiple = FALSE,
          fixed = FALSE
        ),
        teal.transform::values()
      ),
      x = teal.transform::picks(
        datasets("mtcars"),
        teal.transform::variables(
          choices = c("vs", "am"),
          selected = "vs",
          multiple = FALSE,
          fixed = FALSE
        ),
        teal.transform::values()
      )
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

# CDISC data example
data <- teal_data()
data <- within(data, {
  require(nestcolor)
  ADSL <- teal.data::rADSL
})
join_keys(data) <- default_cdisc_join_keys[names(data)]

app <- init(
  data = data,
  modules = modules(
    tm_g_response(
      label = "Response Plots",
      response = teal.transform::picks(
        datasets("ADSL"),
        teal.transform::variables(
          choices = c("BMRKR2", "COUNTRY"),
          selected = "BMRKR2"
        ),
        teal.transform::values()
      ),
      x = teal.transform::picks(
        datasets("ADSL"),
        teal.transform::variables(
          choices = c("SEX", "RACE"),
          selected = "RACE"
        ),
        teal.transform::values()
      )
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
\section{Examples in Shinylive}{
\describe{
  \item{example-1}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXVIhrqu-lCkULpwAB6wqCJKAUEGxlzUAPoxUDbRgcFGugDutKQAFirsKbi6IEq6uoxwAI6CtNXsPqKkxNREjIoQlTCtLKJxur0E-RWmHbrsWroqugTsCoSs1Iuli1qiq7qLsFuLUiyLcrbl3ZVDfYyiwMBaALp3g1DiJuqkHezD-Tf3d12VAF8lACuko0KhBio8gszildABefwZXBjPhCEQDRFo4RiGHnXSkGCJCSJaqiVAkURwPH43TUKD0OB+RGLLBiCkQKm6AAK7VImzwY3xZI5XMRqFoBAA1qIabSkUEqfyFmAvlcjiizvKtCxaAyMXL5XN8kRJWIEXMVQRlnswAdGBqhUaqSINHB+BbFtaVoKtUaYMJNJE9IiAGIAQQAMgBlZyao3nEy0ULui0RmOuP34uTxo0JDCkZickwdGCIRA66iCXH-Wk5p2VUIW-OFqDF0vliXS2UN84pJU91WXAX1rPnFtF0Qlxhliu6-W43v4ggms2Yy3rAVrFAwR1j-EuuBuj0ssAbVZL84B6hBkRpqOx3MJpMpk+6dOxy+jhMTttTjtzlWNa9rWlS1l0XS0CYkwqOQzCWDoNgnGMoiFBArDhug7DggAJPUpS4VSjA6J0wJKGAAJ3EAA}{Open in Shinylive}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXVIhrqu-lCkULpwAB6wqCJKAUEGxlzUAPoxUDbRgcFGugDutKQAFirsKbi6IEq6uoxwAI6CtNXsPqKkxNREjIoQlTCtLKJxur0E-RWmHbrsWroqugTsCoSs1Iuli1qiq7qLsFuLUiyLcrbl3ZVDfYyiwMBaALp3g1DiJuqkHezD-Tf3d12VAF8lACuko0KhBio8gszildABefwZXBjPhCEQDRFo4RiGHnXSkGCJCSJaqiVAkURwPH43TUKD0OB+RGLLBiCkQKm6AAK7VImzwY3xZI5XMRqFoBAA1qIabSkUEqfyFmAvlcjiizvKtCxaAyMXL5XN8kRJWIEXMVQRlnswAdGBqhUaqSINHB+BbFtaVoKtUaYMJNJE9IiAGIAQQAMgBlZyao3nEy0ULui0RmOuP34uTxo0JDCkZickwdGCIRA66iCXH-Wk5p2VUIW-OFqDF0vliXS2UN84pJU91WXAX1rPnFtF0Qlxhliu6-W43v4ggms2Yy3rAVrFAwR1j-EuuBuj0ssAbVZL84B6hBkRpqOx3MJpMpk+6dOxy+jhMTttTjtzlWNa9rWlS1l0XS0CYkwqOQzCWDoNgnGMoiFBArDhug7DggAJPUpS4VSjA6J0wJKGAAJ3EAA" style="height: 800px; width: 100vw; max-width: 1400px; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: absolute; left: 50\%; margin-top: 30px; transform: translateX(-50\%); z-index: 1"></iframe>}}
    \if{html}{\out{<a style='height: 800px; display: block;'></a>}}
  }
  \item{example-2}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXQGEAIgEkAZS9dfihSKF04AA9YVBElUPCDYy5qAH1EqBsEsIijXQB3WlIACxV2TNxdECVdXUY4AEdBWgb2CDFSYmoiRkUIOoBBHwCAGWTdVIxMxERGYbGlAF9+gCsiFTSAazhWUQrc23z+OBMoYVI0gn5aUQI09c2dveBoeH3MuQBdN2h0CZUxXYtRCuV0AF5QeFcCC+EIRKIIbo4cIxMCBnVJjA0hI0g1RKgSKI4OjMZjqFB6HBqEiFGAsGJCRBiboAAo9UiiOkwjFk-FMlmQqakZjMky9GCzVC0AhbfYgsl1TLEznAsALUZ0uQ8xWY4Wi0TixiSxBaFi0SkI0m6zEEEobAhiJEENUAIQAslgANJYABM3N0dK8AHlHAA5BwATS1OptdWJIg0cH4tLAHu9frpCsV2uzZP1UDFEtmZuogjR-V1ud5mKiSILReNUplcutuuVcFVdI1Mbzerg3AwIsLhuLpvNlrRfbJdodTshLrpAWcAA0A3SsIMvK4wNW4-HqXAkynIRutzvp7o9zaG6Om+OyxW+5XMS-+v1aCZdOwVORmJYdBsWwagxUQyggVhBnQdg0FQAASFoqlguDiUYHQ+mWJQwCWL4gA}{Open in Shinylive}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXQGEAIgEkAZS9dfihSKF04AA9YVBElUPCDYy5qAH1EqBsEsIijXQB3WlIACxV2TNxdECVdXUY4AEdBWgb2CDFSYmoiRkUIOoBBHwCAGWTdVIxMxERGYbGlAF9+gCsiFTSAazhWUQrc23z+OBMoYVI0gn5aUQI09c2dveBoeH3MuQBdN2h0CZUxXYtRCuV0AF5QeFcCC+EIRKIIbo4cIxMCBnVJjA0hI0g1RKgSKI4OjMZjqFB6HBqEiFGAsGJCRBiboAAo9UiiOkwjFk-FMlmQqakZjMky9GCzVC0AhbfYgsl1TLEznAsALUZ0uQ8xWY4Wi0TixiSxBaFi0SkI0m6zEEEobAhiJEENUAIQAslgANJYABM3N0dK8AHlHAA5BwATS1OptdWJIg0cH4tLAHu9frpCsV2uzZP1UDFEtmZuogjR-V1ud5mKiSILReNUplcutuuVcFVdI1Mbzerg3AwIsLhuLpvNlrRfbJdodTshLrpAWcAA0A3SsIMvK4wNW4-HqXAkynIRutzvp7o9zaG6Om+OyxW+5XMS-+v1aCZdOwVORmJYdBsWwagxUQyggVhBnQdg0FQAASFoqlguDiUYHQ+mWJQwCWL4gA" style="height: 800px; width: 100vw; max-width: 1400px; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: absolute; left: 50\%; margin-top: 30px; transform: translateX(-50\%); z-index: 1"></iframe>}}
    \if{html}{\out{<a style='height: 800px; display: block;'></a>}}
  }
}
}

