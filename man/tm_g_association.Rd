% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_association.R
\name{tm_g_association}
\alias{tm_g_association}
\title{Stack Plots of variables and show association with reference variable}
\usage{
tm_g_association(
  label = "Association",
  ref,
  vars,
  show_association = TRUE,
  plot_height = c(600, 400, 5000),
  plot_width = NULL,
  distribution_theme = gg_themes,
  association_theme = gg_themes,
  pre_output = NULL,
  post_output = NULL,
  ggplot2_args = teal.devel::ggplot2_args()
)
}
\arguments{
\item{label}{(\code{character}) Label shown in the navigation item for the module.}

\item{ref}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
reference variable, must set \code{multiple = FALSE}.}

\item{vars}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
associated variables.}

\item{show_association}{optional, (\code{logical}) Whether show association of \code{vars}
with reference variable. Defaults to \code{TRUE}.}

\item{plot_height}{optional, (\code{numeric}) A vector of length three with \code{c(value, min and max)}
for a slider encoding the plot height.}

\item{plot_width}{optional, (\code{numeric}) A vector of length three with \code{c(value, min and max)}
for a slider encoding the plot width.}

\item{distribution_theme}{optional, (\code{character}) \code{ggplot} Theme to be used by default
for the distribution plot. All themes can be chosen by the user. Defaults to \code{gray}.
\code{gg_themes} is defined internally as
\code{c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void", "test")}}

\item{association_theme}{optional, (\code{character}) \code{ggplot} Theme to be used by default
for the association plots. All themes can be chosen by the user. Defaults to \code{gray}.
\code{gg_themes} is defined internally as
\code{c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void", "test")}}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example a title.}

\item{post_output}{optional, \code{shiny.tag} with text placed after the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{ggplot2_args}{optional, (`ggplot2_args`) object created by [`teal.devel::ggplot2_args()`]
with settings for all the plots or named list of `ggplot2_args` objects for plot-specific settings.
For more details see the help vignette:
`vignette("Custom ggplot2 arguments module", package = "teal.devel")`.
List names should match the following:\cr
`c("default", "Bivariate1", "Bivariate2")`.
The argument is merged with options variable `teal.ggplot2_args` and default module setup.}
}
\description{
Stack Plots of variables and show association with reference variable
}
\note{
For more examples, please see the vignette "Using association plot" via
\code{vignette("using-association-plot", package = "teal.modules.general")}.
}
\examples{
# Association plot of selected reference variable (SEX)
# against other selected variables (BMRKR1)
library(scda)
ADSL <- synthetic_cdisc_data("latest")$adsl

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL, code = "ADSL <- synthetic_cdisc_data(\"latest\")$adsl"),
    check = TRUE
  ),
  modules = root_modules(
    tm_g_association(
      ref = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = variable_choices(
            ADSL,
            c("SEX", "RACE", "COUNTRY", "ARM", "STRATA1", "STRATA2", "ITTFL", "BMRKR2")
          ),
          selected = "RACE",
          fixed = FALSE
        )
      ),
      vars = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variables:",
          choices = variable_choices(
            ADSL,
            c("SEX", "RACE", "COUNTRY", "ARM", "STRATA1", "STRATA2", "ITTFL", "BMRKR2")
          ),
          selected = "BMRKR2",
          multiple = TRUE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}
}
