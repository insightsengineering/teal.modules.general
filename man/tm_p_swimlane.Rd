% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_p_swimlane.R
\name{tm_p_swimlane}
\alias{tm_p_swimlane}
\title{\code{teal} module: Swimlane plot}
\usage{
tm_p_swimlane(
  label = "Swimlane",
  plot_dataname,
  time_var,
  subject_var,
  color_var,
  group_var,
  sort_var = time_var,
  tooltip_vars = NULL,
  point_size = 10,
  point_colors = character(0),
  point_symbols = character(0),
  plot_height = c(700, 400, 1200),
  table_datanames = character(0),
  reactable_args = list()
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module or module group.
For \code{modules()} defaults to \code{"root"}. See \code{Details}.}

\item{plot_dataname}{(\code{character(1)} or \code{choices_selected}) name of the dataset which visualization is builded on.}

\item{time_var}{(\code{character(1)} or \code{choices_selected}) name of the \code{numeric} column
in \code{plot_dataname} to be used as x-axis.}

\item{subject_var}{(\code{character(1)} or \code{choices_selected}) name of the \code{factor} or \code{character} column
in \code{plot_dataname} to be used as y-axis.}

\item{color_var}{(\code{character(1)} or \code{choices_selected}) name of the \code{factor} or \code{character} column
in \code{plot_dataname} to name and color subject events in time.}

\item{group_var}{(\code{character(1)} or \code{choices_selected}) name of the \code{factor} or \code{character} column in \code{plot_dataname}
to categorize type of event.
(legend is sorted according to this variable, and used in toolip to display type of the event)
todo: this can be fixed by ordering factor levels}

\item{sort_var}{(\code{character(1)} or \code{choices_selected}) name(s) of the column in \code{plot_dataname} which
value determines order of the subjects displayed on the y-axis.}

\item{tooltip_vars}{(\code{character} or \code{NULL}) A vector of column names to be displayed in the tooltip.
If \code{NULL}, default tooltip is created.}

\item{point_size}{(\code{numeric(1)} or \verb{named numeric}) Default point size of the points in the plot.
If \code{point_size} is a named numeric vector, it should be named by levels of \code{color_var} column.}

\item{point_colors}{(\verb{named character}) valid color names (see \code{\link[=colors]{colors()}}) or hex-colors named
by levels of \code{color_var} column.}

\item{point_symbols}{(\verb{named character}) valid plotly symbol name named  by levels of \code{color_var} column.}

\item{plot_height}{(\code{numeric}) optional, specifies the plot height as a three-element vector of
\code{value}, \code{min}, and \code{max} intended for use with a slider UI element.}

\item{table_datanames}{(\code{character}) Names of the datasets to be displayed in the tables below the plot.}

\item{reactable_args}{(\code{list}) Additional arguments passed to the \code{reactable} function for table customization.}
}
\description{
Module visualizes subjects' events in time.
}
\examples{
data <- teal_data() |>
  within({
    subjects <- data.frame(
      subject_var = c("A", "B", "C"),
      AGE = sample(30:100, 3),
      ARM = c("Combination", "Combination", "Placebo")
    )

    swimlane_ds <- data.frame(
      subject_var = sample(c("A", "B", "C"), 10, replace = TRUE),
      time_var = sample(1:100, 10, replace = TRUE),
      color_var = sample(c("CR", "PR", "SD", "PD"), 10, replace = TRUE)
    )
  })
join_keys(data) <- join_keys(
  join_key("subjects", "swimlane_ds", keys = c(subject_var = "subject_var"))
)

app <- init(
  data = data,
  modules = modules(
    tm_p_swimlane(
      plot_dataname = "swimlane_ds",
      table_datanames = "subjects",
      time_var = "time_var",
      subject_var = "subject_var",
      color_var = "color_var",
      group_var = "color_var",
      sort_var = "time_var",
      plot_height = 400,
      point_colors = c(
        CR = "#FF0000", PR = "#00FF00", SD = "#0000FF", PD = "#FFFF00"
      ),
      point_symbols = c(
        CR = "circle", PR = "square", SD = "triangle-up", PD = "diamond"
      )
    )
  )
)

if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
