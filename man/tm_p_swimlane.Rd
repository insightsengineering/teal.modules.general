% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_p_swimlane.R
\name{tm_p_swimlane}
\alias{tm_p_swimlane}
\title{Swimlane Plot Module}
\usage{
tm_p_swimlane(
  label = "Swimlane",
  plot_dataname,
  time_var,
  subject_var,
  color_var,
  group_var,
  sort_var = time_var,
  tooltip_vars = NULL,
  point_size = 10,
  point_colors = character(0),
  point_symbols = character(0),
  plot_height = c(700, 400, 1200),
  show_widgets = TRUE
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module or module group.
For \code{modules()} defaults to \code{"root"}. See \code{Details}.}

\item{plot_dataname}{(\code{character(1)}) Name of the dataset to be used for plotting.}

\item{time_var}{(\code{character(1)}) Name of the numeric column in \code{plot_dataname} to be used as x-axis.}

\item{subject_var}{(\code{character(1)}) Name of the factor or character column in \code{plot_dataname}
to be used as y-axis (subject lanes).}

\item{color_var}{(\code{character(1)}) Name of the factor or character column in \code{plot_dataname}
to name and color subject events in time.}

\item{group_var}{(\code{character(1)}) Name of the factor or character column in \code{plot_dataname}
to categorize type of event. Legend is sorted according to this variable.}

\item{sort_var}{(\code{character(1)}) Name of the column in \code{plot_dataname} whose values determine
the order of subjects displayed on the y-axis.}

\item{tooltip_vars}{(\code{character} or \code{NULL}) A vector of column names to be displayed in the tooltip.
If \code{NULL}, default tooltip is created showing subject, time, color, and group variables.}

\item{point_size}{(\code{numeric(1)} or \verb{named numeric}) Default point size of the points in the plot.
If \code{point_size} is a named numeric vector, it should be named by levels of \code{color_var} column.}

\item{point_colors}{(\verb{named character} or \code{NULL}) Valid color names or hex-colors named by levels of \code{color_var} column.
If \code{NULL}, default colors will be used.}

\item{point_symbols}{(\verb{named character} or \code{NULL}) Valid plotly symbol names named by levels of \code{color_var} column.
If \code{NULL}, default symbols will be used.}

\item{plot_height}{(\code{numeric(3)}) Vector of length 3 with c(default, min, max) plot height values.}

\item{show_widgets}{(\code{logical(1)}) Whether to show module widgets.}
}
\value{
Object of class \code{teal_module} to be used in \code{teal} applications.
}
\description{
This module creates an interactive swimlane plot visualization that displays subjects' events
over time. Each subject is represented by a horizontal lane, with events plotted as points
along the timeline. The plot supports color coding and symbol differentiation for different
event types, customizable sorting of subjects, and interactive tooltips. This visualization
is particularly useful for showing temporal sequences of events across multiple subjects.
}
\examples{
data <- teal_data() |>
  within({
    subjects <- data.frame(
      subject_var = c("A", "B", "C"),
      AGE = sample(30:100, 3),
      ARM = c("Combination", "Combination", "Placebo")
    )

    swimlane_ds <- data.frame(
      subject_var = sample(c("A", "B", "C"), 10, replace = TRUE),
      time_var = sample(1:100, 10, replace = TRUE),
      color_var = sample(c("CR", "PR", "SD", "PD"), 10, replace = TRUE)
    )
  })
join_keys(data) <- join_keys(
  join_key("subjects", "swimlane_ds", keys = c(subject_var = "subject_var"))
)

app <- init(
  data = data,
  modules = modules(
    tm_p_swimlane(
      plot_dataname = "swimlane_ds",
      time_var = "time_var",
      subject_var = "subject_var",
      color_var = "color_var",
      group_var = "color_var",
      sort_var = "time_var",
      plot_height = c(700, 400, 1200),
      tooltip_vars = c("subject_var", "color_var"),
      point_colors = c(
        CR = "#FF0000", PR = "#00FF00", SD = "#0000FF", PD = "#FFFF00"
      ),
      point_symbols = c(
        CR = "circle", PR = "square", SD = "triangle-up", PD = "diamond"
      )
    )
  )
)

if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
