% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_bivariate.R
\name{tm_g_bivariate}
\alias{tm_g_bivariate}
\title{\code{teal} module: Univariate and bivariate visualizations}
\usage{
tm_g_bivariate(
  label = "Bivariate Plots",
  x = picks(datasets(), variables(choices = tidyselect::where(is.numeric) |
    teal.transform::is_categorical(min.len = 2, max.len = 10), selected = 1)),
  y = picks(datasets(), variables(choices = tidyselect::where(is.numeric) |
    teal.transform::is_categorical(min.len = 2, max.len = 10), selected = 2)),
  row_facet = NULL,
  col_facet = NULL,
  facet = !is.null(row_facet) || !is.null(col_facet),
  color = NULL,
  fill = NULL,
  size = NULL,
  use_density = FALSE,
  color_settings = FALSE,
  free_x_scales = FALSE,
  free_y_scales = FALSE,
  plot_height = c(600, 200, 2000),
  plot_width = NULL,
  rotate_xaxis_labels = FALSE,
  swap_axes = FALSE,
  ggtheme = c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void"),
  ggplot2_args = teal.widgets::ggplot2_args(),
  pre_output = NULL,
  post_output = NULL,
  transformators = list(),
  decorators = list()
)
}
\arguments{
\item{x}{(\code{picks}) Variable specification for the x-axis. Created using \code{\link[teal.transform:picks]{teal.transform::picks()}}.
Can be numeric, factor or character. No empty selections are allowed.}

\item{y}{(\code{picks}) Variable specification for the y-axis. Created using \code{\link[teal.transform:picks]{teal.transform::picks()}}.
Can be numeric, factor or character.}

\item{row_facet}{(\code{picks}) optional, specification of the data variable(s) to use for faceting rows.
Created using \code{\link[teal.transform:picks]{teal.transform::picks()}}.}

\item{col_facet}{(\code{picks}) optional, specification of the data variable(s) to use for faceting columns.
Created using \code{\link[teal.transform:picks]{teal.transform::picks()}}.}

\item{facet}{(\code{logical}) optional, specifies whether the facet encodings \code{ui} elements are toggled
on and shown to the user by default. Defaults to \code{TRUE} if either \code{row_facet} or \code{column_facet}
are supplied.}

\item{color}{(\code{picks}) optional, specification of the data variable(s) selected for the outline color
inside the coloring settings. It will be applied when \code{color_settings} is set to \code{TRUE}.
Created using \code{\link[teal.transform:picks]{teal.transform::picks()}}.}

\item{fill}{(\code{picks}) optional, specification of the data variable(s) selected for the fill color
inside the coloring settings. It will be applied when \code{color_settings} is set to \code{TRUE}.
Created using \code{\link[teal.transform:picks]{teal.transform::picks()}}.}

\item{size}{(\code{picks}) optional, specification of the data variable(s) selected for the size of
\code{geom_point} plots inside the coloring settings. It will be applied when \code{color_settings} is set to \code{TRUE}.
Created using \code{\link[teal.transform:picks]{teal.transform::picks()}}.}

\item{use_density}{(\code{logical}) optional, indicates whether to plot density (\code{TRUE}) or frequency (\code{FALSE}).
Defaults to frequency (\code{FALSE}).}

\item{color_settings}{(\code{logical}) Whether coloring, filling and size should be applied
and \code{UI} tool offered to the user.}

\item{free_x_scales}{(\code{logical}) optional, whether X scaling shall be changeable.
Does not allow scaling to be changed by default (\code{FALSE}).}

\item{free_y_scales}{(\code{logical}) optional, whether Y scaling shall be changeable.
Does not allow scaling to be changed by default (\code{FALSE}).}

\item{plot_height}{(\code{numeric}) optional, specifies the plot height as a three-element vector of
\code{value}, \code{min}, and \code{max} intended for use with a slider UI element.}

\item{plot_width}{(\code{numeric}) optional, specifies the plot width as a three-element vector of
\code{value}, \code{min}, and \code{max} for a slider encoding the plot width.}

\item{rotate_xaxis_labels}{(\code{logical}) optional, whether to rotate plot X axis labels. Does not
rotate by default (\code{FALSE}).}

\item{swap_axes}{(\code{logical}) optional, whether to swap X and Y axes. Defaults to \code{FALSE}.}

\item{ggtheme}{(\code{character}) optional, \code{ggplot2} theme to be used by default. Defaults to \code{"gray"}.}

\item{ggplot2_args}{(\code{ggplot2_args}) object created by \code{\link[teal.widgets:ggplot2_args]{teal.widgets::ggplot2_args()}}
with settings for the module plot.
The argument is merged with options variable \code{teal.ggplot2_args} and default module setup.

For more details see the vignette: \code{vignette("custom-ggplot2-arguments", package = "teal.widgets")}}

\item{pre_output}{(\code{shiny.tag}) optional, text or UI element to be displayed before the module's output,
providing context or a title.
with text placed before the output to put the output into context. For example a title.}

\item{post_output}{(\code{shiny.tag}) optional, text or UI element to be displayed after the module's output,
adding context or further instructions. Elements like \code{shiny::helpText()} are useful.}

\item{decorators}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
(named \code{list} of lists of \code{teal_transform_module}) optional,
decorator for tables or plots included in the module output reported.
The decorators are applied to the respective output objects.}
}
\value{
Object of class \code{teal_module} to be used in \code{teal} applications.
}
\description{
Module enables the creation of univariate and bivariate plots,
facilitating the exploration of data distributions and relationships between two variables.
}
\details{
This is a general module to visualize 1 & 2 dimensional data.
}
\note{
For more examples, please see the vignette "Using bivariate plot" via
\code{vignette("using-bivariate-plot", package = "teal.modules.general")}.
}
\section{Decorating Module}{


This module generates the following objects, which can be modified in place using decorators:
\itemize{
\item \code{plot} (\code{ggplot})
}

A Decorator is applied to the specific output using a named list of \code{teal_transform_module} objects.
The name of this list corresponds to the name of the output to which the decorator is applied.
See code snippet below:

\if{html}{\out{<div class="sourceCode">}}\preformatted{tm_g_bivariate(
   ..., # arguments for module
   decorators = list(
     plot = teal_transform_module(...) # applied to the `plot` output
   )
)
}\if{html}{\out{</div>}}

For additional details and examples of decorators, refer to the vignette
\code{vignette("decorate-module-output", package = "teal.modules.general")}.

To learn more please refer to the vignette
\code{vignette("transform-module-output", package = "teal")} or the \code{\link[teal:teal_transform_module]{teal::teal_transform_module()}} documentation.
}

\examples{
# general data example
data <- teal_data()
data <- within(data, {
  require(nestcolor)
  CO2 <- data.frame(CO2)
})

app <- init(
  data = data,
  modules = tm_g_bivariate(
    label = "Bivariate Plots",
    x = picks(
      datasets("CO2"),
      variables(selected = "conc")
    ),
    y = picks(
      datasets("CO2"),
      variables(selected = "uptake")
    ),
    row_facet = picks(
      datasets("CO2"),
      variables(selected = "Type")
    ),
    col_facet = picks(
      datasets("CO2"),
      variables(selected = "Treatment")
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

# CDISC data example
data <- teal_data()
data <- within(data, {
  require(nestcolor)
  ADSL <- teal.data::rADSL
})
join_keys(data) <- default_cdisc_join_keys[names(data)]

app <- init(
  data = data,
  modules = tm_g_bivariate(
    label = "Bivariate Plots",
    x = picks(
      datasets("ADSL"),
      variables(selected = "AGE")
    ),
    y = picks(
      datasets("ADSL"),
      variables(selected = "SEX")
    ),
    row_facet = picks(
      datasets("ADSL"),
      variables(selected = "ARM")
    ),
    col_facet = picks(
      datasets("ADSL"),
      variables(selected = "COUNTRY")
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
\section{Examples in Shinylive}{
\describe{
  \item{example-1}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXVIhrqu-lCkULpwAB6wqCJKAUEGxlzUAPoxUDbRgcFGugDutKQAFirsKbi6IEq6uoxwAI6CtNXsPqKkxNREjIoQlQDCAPIATHH+GRgmzPDs-QNdAL5dSmiowyp57BUjsQC8m1C4G3xCIqK6O6QwiRKJ9NostIFw692VutRQ9HB+OwpgAEK3jHu5F0AAV2qRRD99s9KqFTrpULQCABrURPF4vFKiOAQ9ZgaY-OTQjGVLR3d7HdjYkQaOD8eE-YgWQkbSpE1m6VjwxEotEcypYnF8-GDQnEklkwEUsRUz5wWn075gQSoILIuAsmG6dlaxhEbKJEzqHHcpGo9EkwW4n4EsA6km6SX3eiU6ny8iK3Q-OysVAau0c+0vNqG42kU28i0Yq3C21BjFO6Vot0KhlgOzVQLwMiajFdNlKLq0Ey6dgqcjMSw6Gy2crPUSFCCsACC6HYSwAJPVSp3sYwdJ0lLMlGBZgBdIA}{Open in Shinylive}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXVIhrqu-lCkULpwAB6wqCJKAUEGxlzUAPoxUDbRgcFGugDutKQAFirsKbi6IEq6uoxwAI6CtNXsPqKkxNREjIoQlQDCAPIATHH+GRgmzPDs-QNdAL5dSmiowyp57BUjsQC8m1C4G3xCIqK6O6QwiRKJ9NostIFw692VutRQ9HB+OwpgAEK3jHu5F0AAV2qRRD99s9KqFTrpULQCABrURPF4vFKiOAQ9ZgaY-OTQjGVLR3d7HdjYkQaOD8eE-YgWQkbSpE1m6VjwxEotEcypYnF8-GDQnEklkwEUsRUz5wWn075gQSoILIuAsmG6dlaxhEbKJEzqHHcpGo9EkwW4n4EsA6km6SX3eiU6ny8iK3Q-OysVAau0c+0vNqG42kU28i0Yq3C21BjFO6Vot0KhlgOzVQLwMiajFdNlKLq0Ey6dgqcjMSw6Gy2crPUSFCCsACC6HYSwAJPVSp3sYwdJ0lLMlGBZgBdIA" style="height: 800px; width: 100vw; max-width: 1400px; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: absolute; left: 50\%; margin-top: 30px; transform: translateX(-50\%); z-index: 1"></iframe>}}
    \if{html}{\out{<a style='height: 800px; display: block;'></a>}}
  }
  \item{example-2}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXQGEAIgEkAZS9dfihSKF04AA9YVBElUPCDYy5qAH1EqBsEsIijXQB3WlIACxV2TNxdECVdXUY4AEdBWgb2CDFSYmoiRkUIOoBBHwCAGWTdVIxMxERGYbGlAF9+gCsiFTSAazhWUQrc23z+OBMoYVI0gn5aUQI09c2dveBoeH3MuQBdN2h0CZUxXYtRCuV0AF5QeFcCC+EIRKIIZMYGkJGl6NoWLQwnBgQM6rpqFB6HBqEiFGAAEKYxjY8i6AAKPVIogpMPxdSiSNQtAIW32IIJUKgojgLOBYAWowpcnZQrqWixxIR7FFIg0cH45MlAHFXGB+kLZYLdKxubz+Xj5cLReKKVKZXL5YracqxKrSXANVrIRSAs4ABoyk3Gjn1IgFNJnAhi818gVhuqZW0CyUjaUGp1Cl3Y+gqtVe8g+3T2rAAWWDYdDQu6UfUschPPjVvlybFqYdmZNCqVefdBe92q8AHlHAA5BwATUrRpB-X6tBMunYKnIzEsOhsthq+NEZQgrEG6HYaFQABIWlVT2fRYwdH1lkowEsvkA}{Open in Shinylive}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXQGEAIgEkAZS9dfihSKF04AA9YVBElUPCDYy5qAH1EqBsEsIijXQB3WlIACxV2TNxdECVdXUY4AEdBWgb2CDFSYmoiRkUIOoBBHwCAGWTdVIxMxERGYbGlAF9+gCsiFTSAazhWUQrc23z+OBMoYVI0gn5aUQI09c2dveBoeH3MuQBdN2h0CZUxXYtRCuV0AF5QeFcCC+EIRKIIZMYGkJGl6NoWLQwnBgQM6rpqFB6HBqEiFGAAEKYxjY8i6AAKPVIogpMPxdSiSNQtAIW32IIJUKgojgLOBYAWowpcnZQrqWixxIR7FFIg0cH45MlAHFXGB+kLZYLdKxubz+Xj5cLReKKVKZXL5YracqxKrSXANVrIRSAs4ABoyk3Gjn1IgFNJnAhi818gVhuqZW0CyUjaUGp1Cl3Y+gqtVe8g+3T2rAAWWDYdDQu6UfUschPPjVvlybFqYdmZNCqVefdBe92q8AHlHAA5BwATUrRpB-X6tBMunYKnIzEsOhsthq+NEZQgrEG6HYaFQABIWlVT2fRYwdH1lkowEsvkA" style="height: 800px; width: 100vw; max-width: 1400px; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: absolute; left: 50\%; margin-top: 30px; transform: translateX(-50\%); z-index: 1"></iframe>}}
    \if{html}{\out{<a style='height: 800px; display: block;'></a>}}
  }
}
}

