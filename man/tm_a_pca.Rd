% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_a_pca.R
\name{tm_a_pca}
\alias{tm_a_pca}
\title{Principal component analysis module}
\usage{
tm_a_pca(
  label = "Principal Component Analysis",
  dat,
  plot_height = c(600, 200, 2000),
  plot_width = NULL,
  ggtheme = gg_themes,
  ggplot2_args = teal.devel::ggplot2_args(),
  rotate_xaxis_labels = FALSE,
  font_size = c(12, 8, 20),
  alpha = c(1, 0, 1),
  size = c(2, 1, 8),
  pre_output = NULL,
  post_output = NULL
)
}
\arguments{
\item{label}{(\code{character}) Label shown in the navigation item for the module.}

\item{dat}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Datasets used to compute PCA.}

\item{plot_height}{optional, (\code{numeric}) A vector of length three with \code{c(value, min and max)}
for a slider encoding the plot height.}

\item{plot_width}{optional, (\code{numeric}) A vector of length three with \code{c(value, min and max)}
for a slider encoding the plot width.}

\item{ggtheme}{optional, (\code{character}) \code{ggplot} Theme to be used by default.
\code{gg_themes} is defined internally as
\code{c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void", "test")}
All themes can be chosen by the user. Defaults to \code{gray}.}

\item{ggplot2_args}{optional, (`ggplot2_args`) object created by [`teal.devel::ggplot2_args()`]
with settings for all the plots or named list of `ggplot2_args` objects for plot-specific settings.
For more details see the help vignette:
`vignette("Custom ggplot2 arguments module", package = "teal.devel")`.
List names should match the following:\cr
`c("default", "Elbow plot", "Circle plot", "Biplot", "Eigenvector plot")`.
The argument is merged with options variable `teal.ggplot2_args` and default module setup.}

\item{rotate_xaxis_labels}{optional, (\code{logical}) Whether to rotate plot X axis labels. Does not
rotate by default (\code{FALSE}).}

\item{font_size}{optional, (\code{numeric}) font size control for title, x-axis label, y-axis label and legend.
If scalar then the font size will have a fixed size. If a slider should be presented to adjust the plot
point sizes dynamically then it can be a vector of length three with \code{c(value, min, max)}.}

\item{alpha}{optional, (\code{numeric}) If scalar then the plot points will have a fixed opacity. If a
slider should be presented to adjust the plot point opacity dynamically then it can be a vector of
length three with \code{c(value, min, max)}.}

\item{size}{optional, (\code{numeric}) If scalar then the plot point sizes will have a fixed size.
If a slider should be presented to adjust the plot point sizes dynamically then it can be a
vector of length three with \code{c(value, min, max)}.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example a title.}

\item{post_output}{optional, \code{shiny.tag} with text placed after the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
Principal component analysis module
}
\examples{

# ADSL example

library(scda)
ADSL <- synthetic_cdisc_data("latest")$adsl

app <- teal::init(
  data = cdisc_data(cdisc_dataset(
    "ADSL", ADSL,
    code = "ADSL <- synthetic_cdisc_data(\"latest\")$adsl"
  ),
  check = TRUE
  ),
  modules = root_modules(
    tm_a_pca(
      "PCA",
      data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          choices = variable_choices(data = ADSL, c("BMRKR1", "AGE", "EOSDY")),
          selected = c("BMRKR1", "AGE"),
          multiple = TRUE
        ),
        filter = NULL
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}

}
