% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_scatterplot.R
\name{tm_g_scatterplot}
\alias{tm_g_scatterplot}
\title{\code{teal} module: Scatterplot}
\usage{
tm_g_scatterplot(
  label = "Scatterplot",
  x = teal.transform::picks(teal.transform::datasets(),
    teal.transform::variables(is.numeric), teal.transform::values()),
  y,
  color_by = NULL,
  size_by = NULL,
  row_facet = NULL,
  col_facet = NULL,
  plot_height = c(600, 200, 2000),
  plot_width = NULL,
  alpha = c(1, 0, 1),
  shape = shape_names,
  size = c(5, 1, 15),
  max_deg = 5L,
  rotate_xaxis_labels = FALSE,
  ggtheme = c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void"),
  pre_output = NULL,
  post_output = NULL,
  table_dec = 4,
  ggplot2_args = teal.widgets::ggplot2_args(),
  transformators = list(),
  decorators = list()
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module or module group.
For \code{modules()} defaults to \code{"root"}. See \code{Details}.}

\item{x}{(\code{picks} or \code{list} of multiple \code{picks}) Specifies
variable names selected to plot along the x-axis by default.}

\item{y}{(\code{picks} or \code{list} of multiple \code{picks}) Specifies
variable names selected to plot along the y-axis by default.}

\item{color_by}{(\code{picks} or \code{list} of multiple \code{picks}) optional,
defines the color encoding. If \code{NULL} then no color encoding option will be displayed.}

\item{size_by}{(\code{picks} or \code{list} of multiple \code{picks}) optional,
defines the point size encoding. If \code{NULL} then no size encoding option will be displayed.}

\item{row_facet}{(\code{picks} or \code{list} of multiple \code{picks}) optional,
specifies the variable(s) for faceting rows.}

\item{col_facet}{(\code{picks} or \code{list} of multiple \code{picks}) optional,
specifies the variable(s) for faceting columns.}

\item{plot_height}{(\code{numeric}) optional, specifies the plot height as a three-element vector of
\code{value}, \code{min}, and \code{max} intended for use with a slider UI element.}

\item{plot_width}{(\code{numeric}) optional, specifies the plot width as a three-element vector of
\code{value}, \code{min}, and \code{max} for a slider encoding the plot width.}

\item{alpha}{(\code{integer(1)} or \code{integer(3)}) optional, specifies point opacity.
\itemize{
\item When the length of \code{alpha} is one: the plot points will have a fixed opacity.
\item When the length of \code{alpha} is three: the plot points opacity are dynamically adjusted based on
vector of \code{value}, \code{min}, and \code{max}.
}}

\item{shape}{(\code{character}) optional, character vector with the names of the
shape, e.g. \code{c("triangle", "square", "circle")}. It defaults to \code{shape_names}. This is a complete list from
\code{vignette("ggplot2-specs", package="ggplot2")}.}

\item{size}{(\code{integer(1)} or \code{integer(3)}) optional, specifies point size.
\itemize{
\item When the length of \code{size} is one: the plot point sizes will have a fixed size.
\item When the length of \code{size} is three: the plot points size are dynamically adjusted based on
vector of \code{value}, \code{min}, and \code{max}.
}}

\item{max_deg}{(\code{integer}) optional, maximum degree for the polynomial trend line. Must not be less than 1.}

\item{rotate_xaxis_labels}{(\code{logical}) optional, whether to rotate plot X axis labels. Does not
rotate by default (\code{FALSE}).}

\item{ggtheme}{(\code{character}) optional, \code{ggplot2} theme to be used by default. Defaults to \code{"gray"}.}

\item{pre_output}{(\code{shiny.tag}) optional, text or UI element to be displayed before the module's output,
providing context or a title.
with text placed before the output to put the output into context. For example a title.}

\item{post_output}{(\code{shiny.tag}) optional, text or UI element to be displayed after the module's output,
adding context or further instructions. Elements like \code{shiny::helpText()} are useful.}

\item{table_dec}{(\code{integer}) optional, number of decimal places used to round numeric values in the table.}

\item{ggplot2_args}{(\code{ggplot2_args}) object created by \code{\link[teal.widgets:ggplot2_args]{teal.widgets::ggplot2_args()}}
with settings for the module plot.
The argument is merged with options variable \code{teal.ggplot2_args} and default module setup.

For more details see the vignette: \code{vignette("custom-ggplot2-arguments", package = "teal.widgets")}}

\item{transformators}{(\code{list} of \code{teal_transform_module}) that will be applied to transform module's data input.
To learn more check \code{vignette("transform-input-data", package = "teal")}.}

\item{decorators}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
(named \code{list} of lists of \code{teal_transform_module}) optional,
decorator for tables or plots included in the module output reported.
The decorators are applied to the respective output objects.}
}
\value{
Object of class \code{teal_module} to be used in \code{teal} applications.
}
\description{
Generates a customizable scatterplot using \code{ggplot2}.
This module allows users to select variables for the x and y axes,
color and size encodings, faceting options, and more. It supports log transformations,
trend line additions, and dynamic adjustments of point opacity and size through UI controls.
}
\note{
For more examples, please see the vignette "Using scatterplot" via
\code{vignette("using-scatterplot", package = "teal.modules.general")}.
}
\section{Decorating Module}{


This module generates the following objects, which can be modified in place using decorators:
\itemize{
\item \code{plot} (\code{ggplot})
}

A Decorator is applied to the specific output using a named list of \code{teal_transform_module} objects.
The name of this list corresponds to the name of the output to which the decorator is applied.
See code snippet below:

\if{html}{\out{<div class="sourceCode">}}\preformatted{tm_g_scatterplot(
   ..., # arguments for module
   decorators = list(
     plot = teal_transform_module(...) # applied to the `plot` output
   )
)
}\if{html}{\out{</div>}}

For additional details and examples of decorators, refer to the vignette
\code{vignette("decorate-module-output", package = "teal.modules.general")}.

To learn more please refer to the vignette
\code{vignette("transform-module-output", package = "teal")} or the \code{\link[teal:teal_transform_module]{teal::teal_transform_module()}} documentation.
}

\examples{
# general data example
data <- teal_data()
data <- within(data, {
  require(nestcolor)
  CO2 <- CO2
})

app <- init(
  data = data,
  modules = modules(
    tm_g_scatterplot(
      label = "Scatterplot Choices",
      x = teal.transform::picks(
        datasets("CO2"),
        teal.transform::variables(
          choices = c("conc", "uptake"),
          selected = "conc"
        ),
        teal.transform::values()
      ),
      y = teal.transform::picks(
        datasets("CO2"),
        teal.transform::variables(
          choices = c("conc", "uptake"),
          selected = "uptake"
        ),
        teal.transform::values()
      ),
      color_by = teal.transform::picks(
        datasets("CO2"),
        teal.transform::variables(
          choices = c("Plant", "Type", "Treatment", "conc", "uptake"),
          selected = NULL
        ),
        teal.transform::values()
      ),
      size_by = teal.transform::picks(
        datasets("CO2"),
        teal.transform::variables(choices = c("conc", "uptake"), selected = "uptake"),
        teal.transform::values()
      ),
      row_facet = teal.transform::picks(
        datasets("CO2"),
        teal.transform::variables(
          choices = c("Plant", "Type", "Treatment"),
          selected = NULL
        ),
        teal.transform::values()
      ),
      col_facet = teal.transform::picks(
        datasets("CO2"),
        teal.transform::variables(choices = c("Plant", "Type", "Treatment"), selected = NULL),
        teal.transform::values()
      )
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

# CDISC data example
data <- teal_data()
data <- within(data, {
  require(nestcolor)
  ADSL <- teal.data::rADSL
})
join_keys(data) <- default_cdisc_join_keys[names(data)]

app <- init(
  data = data,
  modules = modules(
    tm_g_scatterplot(
      label = "Scatterplot Choices",
      x = teal.transform::picks(
        datasets("ADSL"),
        teal.transform::variables(choices = c("AGE", "BMRKR1", "BMRKR2"), selected = "AGE"),
        teal.transform::values()
      ),
      y = teal.transform::picks(
        datasets("ADSL"),
        teal.transform::variables(choices = c("AGE", "BMRKR1", "BMRKR2"), selected = "BMRKR1"),
        teal.transform::values()
      ),
      color_by = teal.transform::picks(
        datasets("ADSL"),
        teal.transform::variables(c("AGE", "BMRKR1", "BMRKR2", "RACE", "REGION1"), selected = NULL),
        teal.transform::values()
      ),
      size_by = teal.transform::picks(
        datasets("ADSL"),
        teal.transform::variables(choices = c("AGE", "BMRKR1"), selected = "AGE"),
        teal.transform::values()
      ),
      row_facet = teal.transform::picks(
        datasets("ADSL"),
        teal.transform::variables(choices = c("BMRKR2", "RACE", "REGION1"), selected = NULL),
        teal.transform::values()
      ),
      col_facet = teal.transform::picks(
        datasets("ADSL"),
        teal.transform::variables(choices = c("BMRKR2", "RACE", "REGION1"), selected = NULL),
        teal.transform::values()
      )
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
\section{Examples in Shinylive}{
\describe{
  \item{example-1}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXVIhrqu-lCkULpwAB6wqCJKAUEGxlzUAPoxUDbRgcFGugDutKQAFirsKbi6IEq6uoxwAI6CtNXsPqKkxNREjIoQlQDCAPIATHG6-QNKAL5dSmiowyp57BX+GboAvMtBuEt8QiKia7o7wmKL3ZW6pDCJEomiBIHkjJFEpKfn59RQ9HB+6wpgAGV7qRHs9SCN8kRaAQxP8tmd3qEDgkMKRmBBRCYOjBEIhUNCANaiN7vc4pURwUjE-6jf5yeGk84otFQDFYxg4xBaFi0L57EmMyoESHQsQHAiLQgkAhw3T-QSoIIEuB0hmCyoUkQaOD8A7-YgWf5LRn042k5nozHY3Hc6iCE5dE1q96sZFwbioy3szn4ghEgWk8mU6lgWlgU0I83ungstnWrk8vknM2M4VQmH7dYS-XS2XyxVQZWqlOkzVwbW6v5gBVKlVgEuVCPqi2sq0cm3ce3Ex2kpuktodRL0V3rFtx9t4wnUyPvINUyVhvuMsdtzncxi8+j8hvnNOizO6bNgAAKnzIebAdlYqDrpX+dmqgXg57wcqlhtf+drxZnpZ+5fIStdAAOUcAAZMCdyXKMPVjVcOztB0S2gjVaAALzgIcRwuaNPVbb1cV9f0dznENF2dGCYy9eN103fk9wzcVJQNGVP2rAsi3DUoywrPV2O-LidxXAiE0Q7tkIoypGCIbJEhMdRKTdWDqInIjp3VUiF0GH9m1wuCRNopN1PVQ8RUYrNJVPVlSAvK8b1sx9LgoGzBN-d4eMAg5QIgqDJKZPSVLXTskN-FDDyIJJ5JhcFRwC-D4zUgNZwyCl5xpbTXN05T4onQytxOBixQs-4rJfO9L2vW83wfd0nJfeldA8nUvPAsCwsqYSaOC8TQrNHsui6WgTF0dgVEedRNB0GxbHKM5REKCBWAAQXQdgZgAEnqUoNopRgdE6CYlDAcYAF0gA}{Open in Shinylive}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXVIhrqu-lCkULpwAB6wqCJKAUEGxlzUAPoxUDbRgcFGugDutKQAFirsKbi6IEq6uoxwAI6CtNXsPqKkxNREjIoQlQDCAPIATHG6-QNKAL5dSmiowyp57BX+GboAvMtBuEt8QiKia7o7wmKL3ZW6pDCJEomiBIHkjJFEpKfn59RQ9HB+6wpgAGV7qRHs9SCN8kRaAQxP8tmd3qEDgkMKRmBBRCYOjBEIhUNCANaiN7vc4pURwUjE-6jf5yeGk84otFQDFYxg4xBaFi0L57EmMyoESHQsQHAiLQgkAhw3T-QSoIIEuB0hmCyoUkQaOD8A7-YgWf5LRn042k5nozHY3Hc6iCE5dE1q96sZFwbioy3szn4ghEgWk8mU6lgWlgU0I83ungstnWrk8vknM2M4VQmH7dYS-XS2XyxVQZWqlOkzVwbW6v5gBVKlVgEuVCPqi2sq0cm3ce3Ex2kpuktodRL0V3rFtx9t4wnUyPvINUyVhvuMsdtzncxi8+j8hvnNOizO6bNgAAKnzIebAdlYqDrpX+dmqgXg57wcqlhtf+drxZnpZ+5fIStdAAOUcAAZMCdyXKMPVjVcOztB0S2gjVaAALzgIcRwuaNPVbb1cV9f0dznENF2dGCYy9eN103fk9wzcVJQNGVP2rAsi3DUoywrPV2O-LidxXAiE0Q7tkIoypGCIbJEhMdRKTdWDqInIjp3VUiF0GH9m1wuCRNopN1PVQ8RUYrNJVPVlSAvK8b1sx9LgoGzBN-d4eMAg5QIgqDJKZPSVLXTskN-FDDyIJJ5JhcFRwC-D4zUgNZwyCl5xpbTXN05T4onQytxOBixQs-4rJfO9L2vW83wfd0nJfeldA8nUvPAsCwsqYSaOC8TQrNHsui6WgTF0dgVEedRNB0GxbHKM5REKCBWAAQXQdgZgAEnqUoNopRgdE6CYlDAcYAF0gA" style="height: 800px; width: 100vw; max-width: 1400px; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: absolute; left: 50\%; margin-top: 30px; transform: translateX(-50\%); z-index: 1"></iframe>}}
    \if{html}{\out{<a style='height: 800px; display: block;'></a>}}
  }
  \item{example-2}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXQGEAIgEkAZS9dfihSKF04AA9YVBElUPCDYy5qAH1EqBsEsIijXQB3WlIACxV2TNxdECVdXUY4AEdBWgb2CDFSYmoiRkUIOoBBHwCAGWTdVIxMxERGYbGlAF9+gCsiFTSAazhWUQrc23z+OBMoYVI0gn5aUQI09c2dveBoeH3MuQBdN2h0CZUxXYtRCuV0AF5QeFcCC+EIRKIIbo4cIxMCBnVJjA0hI0ncwuRGHEiKR0ZjMdQoPQ4NQkQowAECASZMTSN4ShsCGJ6TCMeSokipqRmBBRCZejBZqhaAQtvsQeS6plRHBSPKwAtRvS5LzFZihSKxRLZloWLQqQj2AQOTKxEiCMCNQBxVx4XT0gBCAFksABpLAARh57rA3r9WAATNqqiqRBo4Pw6c7XTqFYqDVBReLGJLEKbqII0f09am+ZjWIK4NwMMLM0ac1KZXKyXqoVAVWrHZro2nyRms8a82aLWjrZy7ZCHfTBi7g56ff6g275+Go2AdbpY3B44nISvFz2y32qzxawOG0OC0Xe7pS3rur00vQK5D+-Xc9LZfKj5jlar1d2666q2b7ZrmpqMOa9CWlOyZzqGC6BvBYb+muVT0lggxeK66FgFgzhOn4ADyAByS4bluO5IiRjijKMd4gSeNaGmBJrcIW+zFoqDHkqItAAF5wE+L6TExZ7vo2X4tnqf6dtOIxakBN51KBg4QVBME2lyiKTl2s7Lgh4bkTGNLbuQu4hjOKbAXqqkXvmHHZD+PGYowRAFGkZxcmyr5iSxg6fs2ylth2AEKYeraidW4msUOkEjvsY62jpuiwShkbwZh2GZQRxFkdGm6mVRkI0XRLnHtF-n2ex17OTZmLdJ56iqpWlV1rFgXfpFslhYsSk-ipfntWpw7QaOWkTqljrpWhIZZThc25aRxmFXG5nUbR9H1RVp5VeBNWcTeXF1Fx-T9LQJi6OwKiEuomg6DYtg1BiohlBArCDOg7BoKgAAkLRVD9v0qowOh9MsShgEsXxAA}{Open in Shinylive}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXQGEAIgEkAZS9dfihSKF04AA9YVBElUPCDYy5qAH1EqBsEsIijXQB3WlIACxV2TNxdECVdXUY4AEdBWgb2CDFSYmoiRkUIOoBBHwCAGWTdVIxMxERGYbGlAF9+gCsiFTSAazhWUQrc23z+OBMoYVI0gn5aUQI09c2dveBoeH3MuQBdN2h0CZUxXYtRCuV0AF5QeFcCC+EIRKIIbo4cIxMCBnVJjA0hI0ncwuRGHEiKR0ZjMdQoPQ4NQkQowAECASZMTSN4ShsCGJ6TCMeSokipqRmBBRCZejBZqhaAQtvsQeS6plRHBSPKwAtRvS5LzFZihSKxRLZloWLQqQj2AQOTKxEiCMCNQBxVx4XT0gBCAFksABpLAARh57rA3r9WAATNqqiqRBo4Pw6c7XTqFYqDVBReLGJLEKbqII0f09am+ZjWIK4NwMMLM0ac1KZXKyXqoVAVWrHZro2nyRms8a82aLWjrZy7ZCHfTBi7g56ff6g275+Go2AdbpY3B44nISvFz2y32qzxawOG0OC0Xe7pS3rur00vQK5D+-Xc9LZfKj5jlar1d2666q2b7ZrmpqMOa9CWlOyZzqGC6BvBYb+muVT0lggxeK66FgFgzhOn4ADyAByS4bluO5IiRjijKMd4gSeNaGmBJrcIW+zFoqDHkqItAAF5wE+L6TExZ7vo2X4tnqf6dtOIxakBN51KBg4QVBME2lyiKTl2s7Lgh4bkTGNLbuQu4hjOKbAXqqkXvmHHZD+PGYowRAFGkZxcmyr5iSxg6fs2ylth2AEKYeraidW4msUOkEjvsY62jpuiwShkbwZh2GZQRxFkdGm6mVRkI0XRLnHtF-n2ex17OTZmLdJ56iqpWlV1rFgXfpFslhYsSk-ipfntWpw7QaOWkTqljrpWhIZZThc25aRxmFXG5nUbR9H1RVp5VeBNWcTeXF1Fx-T9LQJi6OwKiEuomg6DYtg1BiohlBArCDOg7BoKgAAkLRVD9v0qowOh9MsShgEsXxAA" style="height: 800px; width: 100vw; max-width: 1400px; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: absolute; left: 50\%; margin-top: 30px; transform: translateX(-50\%); z-index: 1"></iframe>}}
    \if{html}{\out{<a style='height: 800px; display: block;'></a>}}
  }
}
}

