% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_scatterplot.R
\name{tm_g_scatterplot}
\alias{tm_g_scatterplot}
\title{Create a simple scatterplot}
\usage{
tm_g_scatterplot(
  label = "Scatterplot",
  x,
  y,
  color_by = NULL,
  size_by = NULL,
  row_facet = NULL,
  col_facet = NULL,
  plot_height = c(600, 200, 2000),
  plot_width = NULL,
  alpha = c(1, 0, 1),
  shape = shape_names,
  size = c(5, 1, 15),
  max_deg = 5L,
  rotate_xaxis_labels = FALSE,
  ggtheme = c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void",
    "test"),
  pre_output = NULL,
  post_output = NULL,
  table_dec = 4,
  ggplot2_args = teal.widgets::ggplot2_args()
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module. Any label possible except
\code{"global_filters"} - read more in \code{mapping} argument of \link[teal]{teal_slices}.}

\item{x}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec}) Variable
names selected to plot along the x-axis by default.}

\item{y}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec}) Variable
names selected to plot along the y-axis by default.}

\item{color_by}{optional (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Defines the color encoding. If \code{NULL} then no color encoding option will be displayed.}

\item{size_by}{optional (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Defines the point size encoding. If \code{NULL} then no size encoding option will be displayed.}

\item{row_facet}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which data columns to use for faceting rows.}

\item{col_facet}{optional, (\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Which data to use for faceting columns.}

\item{plot_height}{optional, (\code{numeric}) A vector of length three with \verb{c(value, min and max)}
for a slider encoding the plot height.}

\item{plot_width}{optional, (\code{numeric}) A vector of length three with \verb{c(value, min and max)}
for a slider encoding the plot width.}

\item{alpha}{optional, (\code{numeric}) If scalar then the plot points will have a fixed opacity. If a
slider should be presented to adjust the plot point opacity dynamically then it can be a vector of
length three with \code{c(value, min, max)}.}

\item{shape}{optional, (\code{character}) A character vector with the English names of the
shape, e.g. \code{c("triangle", "square", "circle")}. It defaults to \code{shape_names}. This is a complete list from
\code{vignette("ggplot2-specs", package="ggplot2")}.}

\item{size}{optional, (\code{numeric}) If scalar then the plot point sizes will have a fixed size
If a slider should be presented to adjust the plot point sizes dynamically then it can be a
vector of length three with \code{c(value, min, max)}.}

\item{max_deg}{optional, (\code{integer}) The maximum degree for the polynomial trend line. Must not be less than 1.}

\item{rotate_xaxis_labels}{optional, (\code{logical}) Whether to rotate plot X axis labels. Does not
rotate by default (\code{FALSE}).}

\item{ggtheme}{optional, (\code{character}) \code{ggplot2} theme to be used by default.
One of \code{c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void", "test")}.
Each theme can be chosen by the user during the session. Defaults to \code{"gray"}.}

\item{pre_output}{(\code{shiny.tag}, optional)\cr
with text placed before the output to put the output into context. For example a title.}

\item{post_output}{(\code{shiny.tag}, optional) with text placed after the output to put the output
into context. For example the \code{\link[shiny:helpText]{shiny::helpText()}} elements are useful.}

\item{table_dec}{optional, (\code{integer}) Number of decimal places used to round numeric values in the table.}

\item{ggplot2_args}{(\code{ggplot2_args}) object created by \code{\link[teal.widgets:ggplot2_args]{teal.widgets::ggplot2_args()}}
with settings for the module plot.
The argument is merged with options variable \code{teal.ggplot2_args} and default module setup.

For more details see the vignette: \code{vignette("custom-ggplot2-arguments", package = "teal.widgets")}}
}
\description{
Create a plot with the \code{\link{ggplot2}[geom_point]} function
}
\note{
For more examples, please see the vignette "Using scatterplot" via
\code{vignette("using-scatterplot", package = "teal.modules.general")}.
}
\examples{
# Scatterplot of variables from ADSL dataset
library(nestcolor)

ADSL <- teal.modules.general::rADSL

app <- teal::init(
  data = teal.data::cdisc_data(
    teal.data::cdisc_dataset("ADSL", ADSL, code = "ADSL <- teal.modules.general::rADSL"),
    check = TRUE
  ),
  modules = teal::modules(
    teal.modules.general::tm_g_scatterplot(
      label = "Scatterplot Choices",
      x = teal.transform::data_extract_spec(
        dataname = "ADSL",
        select = teal.transform::select_spec(
          label = "Select variable:",
          choices = teal.transform::variable_choices(
            ADSL,
            c("AGE", "BMRKR1", "BMRKR2")
          ),
          selected = "AGE",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      y = teal.transform::data_extract_spec(
        dataname = "ADSL",
        select = teal.transform::select_spec(
          label = "Select variable:",
          choices = teal.transform::variable_choices(
            ADSL,
            c("AGE", "BMRKR1", "BMRKR2")
          ),
          selected = "BMRKR1",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      color_by = teal.transform::data_extract_spec(
        dataname = "ADSL",
        select = teal.transform::select_spec(
          label = "Select variable:",
          choices = teal.transform::variable_choices(
            ADSL,
            c("AGE", "BMRKR1", "BMRKR2", "RACE", "REGION1")
          ),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      size_by = teal.transform::data_extract_spec(
        dataname = "ADSL",
        select = teal.transform::select_spec(
          label = "Select variable:",
          choices = teal.transform::variable_choices(
            ADSL,
            c("AGE", "BMRKR1", "BMRKR2", "RACE", "REGION1")
          ),
          selected = "AGE",
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      row_facet = teal.transform::data_extract_spec(
        dataname = "ADSL",
        select = teal.transform::select_spec(
          label = "Select variable:",
          choices = teal.transform::variable_choices(
            ADSL,
            c("BMRKR2", "RACE", "REGION1")
          ),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      col_facet = teal.transform::data_extract_spec(
        dataname = "ADSL",
        select = teal.transform::select_spec(
          label = "Select variable:",
          choices = teal.transform::variable_choices(
            ADSL,
            c("BMRKR2", "RACE", "REGION1")
          ),
          selected = NULL,
          multiple = FALSE,
          fixed = FALSE
        )
      ),
      ggplot2_args = teal.widgets::ggplot2_args(
        labs = list(subtitle = "Plot generated by Scatterplot Module")
      )
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}
}
