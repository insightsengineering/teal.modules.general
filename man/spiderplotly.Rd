% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_p_spiderplot.R
\name{spiderplotly}
\alias{spiderplotly}
\title{Generate Spider Plotly Code}
\usage{
spiderplotly(
  df,
  time_var,
  value_var,
  subject_var,
  filter_event_var,
  selected_event,
  color_var,
  colors,
  symbols,
  size_var = NULL,
  height = 600,
  point_size = 10,
  title = "Spider Plot",
  source,
  tooltip_vars = NULL
)
}
\arguments{
\item{df}{(\code{character(1)}) Name of the data frame to plot}

\item{time_var}{(\code{character(1)}) Name of the numeric column to be used as x-axis}

\item{value_var}{(\code{character(1)}) Name of the numeric column to be used as y-axis}

\item{subject_var}{(\code{character(1)}) Name of the factor or character column to be used as grouping variable}

\item{filter_event_var}{(\code{character(1)}) Name of the factor or character column to be used to filter the data}

\item{selected_event}{(\code{character(1)}) Selected event value for filtering}

\item{color_var}{(\code{character(1)}) Name of the factor or character column to be used to differentiate colors and symbols}

\item{colors}{(\code{character}) Named vector of colors for color_var levels}

\item{symbols}{(\code{character}) Named vector of plotly symbols for color_var levels}

\item{size_var}{(\code{character(1)} or \code{NULL}) If provided, this numeric column will determine point size}

\item{height}{(\code{numeric(1)}) Plot height in pixels}

\item{point_size}{(\code{numeric(1)}) Fixed point size when size_var is NULL}

\item{title}{(\code{character(1)}) Plot title}

\item{source}{(\code{character(1)}) Source identifier for plotly events}

\item{tooltip_vars}{(\code{character} or \code{NULL}) A vector of column names to be displayed in the tooltip.
If \code{NULL}, default tooltip is created showing time, value, subject, and color variables.}
}
\value{
A code expression that when evaluated creates a plotly plot object
}
\description{
Creates code expression that generates a spider plot with tooltips using plotly.
This function includes all the data manipulation and plot creation logic
from tm_p_spiderplot module, including filtering, label extraction, tooltip generation,
line segments creation, and event registration.
}
\examples{
# Generate code for a spider plot
code <- spiderplotly(
  df = "spider_data",
  time_var = "time_point",
  value_var = "response",
  subject_var = "subject_id",
  filter_event_var = "event_type",
  selected_event = "response",
  color_var = "treatment",
  colors = c("Active" = "red", "Placebo" = "blue"),
  symbols = c("Active" = "circle", "Placebo" = "square"),
  size_var = NULL,
  height = 600,
  point_size = 10,
  title = "Spider Plot",
  source = "spiderplot",
  tooltip_vars = c("subject_id", "treatment")
)

}
