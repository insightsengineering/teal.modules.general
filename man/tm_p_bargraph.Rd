% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_p_bargraph.R
\name{tm_p_bargraph}
\alias{tm_p_bargraph}
\title{Bar Graph Module}
\usage{
tm_p_bargraph(
  label = "Bar Plot",
  plot_dataname,
  y_var,
  color_var,
  count_var,
  bar_colors = NULL,
  tooltip_vars = NULL,
  transformators = list()
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module or module group.
For \code{modules()} defaults to \code{"root"}. See \code{Details}.}

\item{plot_dataname}{(\code{character(1)}) Name of the dataset to be used for plotting.}

\item{y_var}{(\code{character(1)}) Name of the categorical variable to be displayed on y-axis (bar categories).}

\item{color_var}{(\code{character(1)}) Name of the categorical variable used for color coding and stacking segments.}

\item{count_var}{(\code{character(1)}) Name of the variable whose distinct values will be counted for bar heights.}

\item{bar_colors}{(\verb{named character} or \code{NULL}) Valid color names or hex-colors named by levels of \code{color_var} column.
If \code{NULL}, default colors will be used.}

\item{tooltip_vars}{(\code{character} or \code{NULL}) A vector of column names to be displayed in the tooltip.
If \code{NULL}, default tooltip is created showing y, color, and count variables.}

\item{transformators}{(\code{list} of \code{teal_transform_module}) that will be applied to transform module's data input.
To learn more check \code{vignette("transform-input-data", package = "teal")}.}
}
\value{
Object of class \code{teal_module} to be used in \code{teal} applications.
}
\description{
This module creates an interactive horizontal stacked bar chart visualization that
displays counts of distinct values grouped by categories. The bars are automatically
ordered by total count (ascending) and support color coding by a categorical variable.
Users can select bar segments by brushing to filter the underlying data. The plot
aggregates data by counting distinct values within each group combination.
}
\examples{
data <- teal_data() |>
  within({
    df <- data.frame(
      adverse_event = sample(
        c("Headache", "Nausea", "Fatigue", "Dizziness", "Rash", "Insomnia"),
        150,
        replace = TRUE,
        prob = c(0.25, 0.2, 0.18, 0.15, 0.12, 0.1)
      ),
      severity = sample(
        c("Mild", "Moderate", "Severe"),
        150,
        replace = TRUE,
        prob = c(0.6, 0.3, 0.1)
      ),
      subject_id = sample(paste0("S", 1:40), 150, replace = TRUE),
      treatment = sample(c("Active", "Placebo"), 150, replace = TRUE),
      age_group = sample(c("Young", "Middle", "Old"), 150, replace = TRUE),
      center = sample(c("Site A", "Site B", "Site C", "Site D"), 150, replace = TRUE),
      system_organ_class = sample(
        c("Nervous System", "Gastrointestinal", "General", "Skin"),
        150,
        replace = TRUE
      )
    )

    attr(df$adverse_event, "label") <- "Adverse Event Type"
    attr(df$severity, "label") <- "Severity Grade"
    attr(df$subject_id, "label") <- "Subject ID"
    attr(df$treatment, "label") <- "Treatment Group"
    attr(df$age_group, "label") <- "Age Group"
    attr(df$center, "label") <- "Study Center"
    attr(df$system_organ_class, "label") <- "System Organ Class"
  })

app <- init(
  data = data,
  modules = modules(
    tm_p_bargraph(
      label = "Basic Bar Graph",
      plot_dataname = "df",
      y_var = "adverse_event",
      color_var = "treatment",
      count_var = "subject_id"
    )
  )
)

if (interactive()) {
  shinyApp(app$ui, app$server)
}

app <- init(
  data = data,
  modules = modules(
    tm_p_bargraph(
      label = "Advanced Bar Graph with All Features",
      plot_dataname = "df",
      y_var = "adverse_event",
      color_var = "severity",
      count_var = "subject_id",
      bar_colors = c(
        "Mild" = "#90EE90",
        "Moderate" = "#FFD700",
        "Severe" = "#FF6347"
      ),
      tooltip_vars = c("adverse_event", "severity", "treatment", "age_group", "center", "system_organ_class")
    )
  )
)

if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
