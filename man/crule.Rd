% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{crule}
\alias{crule}
\title{Add condition to rule function.}
\usage{
crule(rule, condition, ...)
}
\arguments{
\item{rule}{\code{function} or \code{formula} that specifies a validation rule and a failing message}

\item{condition}{\code{call} that specifies when to check \code{rule}, see \code{Details}}

\item{...}{additional arguments passed to \code{rule}}
}
\value{
Returns a rule function, ready to be placed into a \code{iv$add_rule} call.
}
\description{
Adds a condition to a rule function to be used in an \code{InputValidator}.
}
\details{
When building a \code{shinyvalidate::InputValidator}, some rules may only need to be checked
under specific conditions. Since an input value must not be validated by multiple
validator objects (as per \code{shinyvalidate} documentation),
some validation scenarios cannot be covered by adding \code{condition}s to a whole validator.

This function takes a function or formula that can be used as a validation rule
and incorporates \code{condition} into its body, upstream of the actual test.

In cases where \code{condition} relies in input values, it is safer to wrap \code{condition}
in an \code{isTRUE} call so that missing values or NULLs do not crash evaluation.
For example, \code{input$id == "x"} will return \code{logical(0)} if input$id is NULL
and \code{NA} if input$id is NA, whereas \code{isTRUE(input$id == "x")} will reliably return \code{FALSE}.
}
\section{Expression length}{

There is a yet unsolved bug that causes \code{crule} to fail if the condition is too long,
i.e. requires too many characters to specify. This is somehow tied to text wrapping in the console.
Efforts are being undertaken to remove this bug but for the time being it has to be avoided.
For example, if the application raises \verb{Error in str2lang(s) : argument must be character}
and condition\code{is}input$id \%in\% c(element1, element2, element3, element, element5')\verb{, consider assigning }allowed <- c(element1, element2, element3, element, element5')\verb{and pass}condition = isTRUE(input$id \%in\% allowed)`.
}

\examples{
\notrun{
library(shinyvalidate)

iv <- InputValidator$new()
iv$add_rule("id", sv_required())
iv$add_rule("id", crule(custom_rule, !is.null(set)))
iv$add_rule("id", crule(~ if(!. \%in\% set), !is.null(set)))
}

}
\seealso{
\verb{[shinyvalidate::InputValidator]}
}
