% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_p_scatterlineplot.R
\name{tm_p_scatterlineplot}
\alias{tm_p_scatterlineplot}
\title{Scatter + Line Plot Module}
\usage{
tm_p_scatterlineplot(
  label = "Scatter + Line Plot",
  plot_dataname,
  subject_var,
  x_var,
  y_var,
  color_var,
  point_colors = character(0),
  transformators = list(),
  reference_lines = NULL
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module.}

\item{plot_dataname}{(\code{character(1)}) Name of the dataset to be used for plotting.}

\item{subject_var}{(\code{character(1)}) Name of the subject variable used for grouping in the line plot.}

\item{x_var}{(\code{character(1)}) Name of the variable to be used for x-axis in both plots.}

\item{y_var}{(\code{character(1)}) Name of the variable to be used for y-axis in both plots.}

\item{color_var}{(\code{character(1)}) Name of the variable to be used for coloring points in both plots.}

\item{point_colors}{(\verb{named character}) Valid color names or hex-colors named by levels of color_var column.}

\item{transformators}{(\code{list}) Named list of transformator functions.}

\item{reference_lines}{(\code{list} or \code{NULL}) Reference lines specification for the line plot.}
}
\description{
This module creates a combined visualization with both scatter plot and line plot views.
It displays a scatter plot where users can select points, and the selection is reflected
in a corresponding line plot below.
}
\details{
The line plot uses \code{subject_var} as the grouping variable to connect points with lines.
When no selection is made in the scatter plot, the line plot shows all data.
}
\examples{
data <- teal_data() |>
  within({
    df <- data.frame(
      subject_id = rep(c("S1", "S2", "S3"), each = 4),
      time_point = rep(c(0, 30, 60, 90), 3),
      response = rnorm(12, 15, 3),
      treatment = rep(c("A", "B", "A"), each = 4)
    )
  })

app <- init(
  data = data,
  modules = modules(
    tm_p_scatterlineplot(
      label = "Scatter + Line Plot",
      plot_dataname = "df",
      subject_var = "subject_id",
      x_var = "time_point",
      y_var = "response",
      color_var = "treatment"
    )
  )
)

if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
