% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_p_spiderplot.R
\name{tm_p_spiderplot}
\alias{tm_p_spiderplot}
\title{\code{teal} module: Spider Plot}
\usage{
tm_p_spiderplot(
  label = "Spiderplot",
  time_var,
  value_var,
  subject_var,
  color_var,
  size_var = NULL,
  tooltip_vars = NULL,
  point_colors = character(0),
  point_symbols = character(0),
  plot_height = c(600, 400, 1200),
  transformators = list(),
  decorators = list()
)
}
\arguments{
\item{time_var}{(\code{character(1)} or \code{variables}) name of the \code{numeric} column
in \code{plot_dataname} to be used as x-axis.}

\item{value_var}{(\code{character(1)} or \code{variables}) name of the \code{numeric} column
in \code{plot_dataname} to be used as y-axis.}

\item{subject_var}{(\code{character(1)} or \code{variables}) name of the \code{factor} or \code{character} column
in \code{plot_dataname} to be used as grouping variable for displayed lines/points.}

\item{color_var}{(\code{character(1)} or \code{variables}) name of the \code{factor} or \code{character} column in \code{plot_dataname}
to be used to differentiate colors and symbols.}

\item{size_var}{(\code{character(1)} or \code{variables} or \code{NULL}) If provided, this numeric column from the \code{plot_dataname}
will be used to determine the size of the points. If \code{NULL}, a fixed size based on the \code{point_size} is used.}

\item{tooltip_vars}{(\code{character} or \code{NULL}) A vector of column names to be displayed in the tooltip.
If \code{NULL}, default tooltip is created.}

\item{point_colors}{(\verb{named character}) valid color names (see \code{\link[=colors]{colors()}}) or hex-colors named
by levels of \code{color_var} column.}

\item{point_symbols}{(\verb{named character}) valid plotly symbol name named  by levels of \code{color_var}column.}

\item{plot_height}{(\code{numeric}) optional, specifies the plot height as a three-element vector of
\code{value}, \code{min}, and \code{max} intended for use with a slider UI element.}

\item{decorators}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
(named \code{list} of lists of \code{teal_transform_module}) optional,
decorator for tables or plots included in the module output reported.
The decorators are applied to the respective output objects.}
}
\description{
Module visualizes value development in time grouped by subjects.
}
\examples{
library(teal.transform)
data <- teal_data() |>
  within({
    subjects <- data.frame(
      subject_var = c("A", "B", "C"),
      AGE = sample(30:100, 3),
      ARM = c("Combination", "Combination", "Placebo")
    )

    swimlane_ds <- data.frame(
      subject_var = sample(c("A", "B", "C"), 10, replace = TRUE),
      time_var = sample(1:100, 10, replace = TRUE),
      color_var = sample(c("CR", "PR", "SD", "PD"), 10, replace = TRUE)
    )

    spiderplot_ds <- data.frame(
      subject_var = sample(c("A", "B", "C"), 10, replace = TRUE),
      time_var = 1:10,
      filter_event_var = "response",
      color_var = sample(c("CR", "PR", "SD", "PD"), 10, replace = TRUE),
      value_var = sample(-50:100, 10, replace = TRUE)
    )

    waterfall_ds <- data.frame(
      subject_var = sample(c("A", "B", "C"), 10, replace = TRUE),
      value_var = sample(-20:90, 10, replace = TRUE),
      color_var = sample(c("CR", "PR", "SD", "PD"), 10, replace = TRUE)
    )
  })
join_keys(data) <- join_keys(
  join_key("subjects", "spiderplot_ds", keys = c(subject_var = "subject_var"))
)

app <- init(
  data = data,
  modules = modules(
    tm_p_spiderplot(
      plot_dataname = "spiderplot_ds",
      table_datanames = "subjects",
      time_var = picks(datasets("spiderplot_ds"), variables("time_var")),
      value_var = picks(datasets("spiderplot_ds"), variables("value_var")),
      subject_var = picks(datasets("spiderplot_ds"), variables("subject_var")),
      color_var = picks(datasets("spiderplot_ds"), variables("color_var")),
      transformators = list(
        teal_transform_filter(
          picks(
            datasets("spiderplot_ds"), variables("filter_event_var"), values()
          )
        )
      ),
      point_colors = c(
        CR = "#FF0000", PR = "#00FF00", SD = "#0000FF", PD = "#FFFF00"
      ),
      point_symbols = c(
        CR = "circle", PR = "square", SD = "triangle-up", PD = "diamond"
      ),
      tooltip_vars = c("subject_var")
    )
  )
)

if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
