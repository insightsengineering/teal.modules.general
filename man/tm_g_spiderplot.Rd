% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_spiderplot.R
\name{tm_g_spiderplot}
\alias{tm_g_spiderplot}
\title{\code{teal} module: Spider Plot}
\usage{
tm_g_spiderplot(
  label = "Spiderplot",
  plot_dataname,
  time_var,
  value_var,
  subject_var,
  filter_event_var,
  color_var,
  point_colors = character(0),
  point_symbols = character(0),
  plot_height = 600,
  table_datanames = character(0),
  reactable_args = list(),
  transformator = transformator
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module or module group.
For \code{modules()} defaults to \code{"root"}. See \code{Details}.}

\item{plot_dataname}{(\code{character(1)} or \code{choices_selected}) name of the dataset which visualization is builded on.}

\item{time_var}{(\code{character(1)} or \code{choices_selected}) name of the \code{numeric} column
in \code{plot_dataname} to be used as x-axis.}

\item{value_var}{(\code{character(1)} or \code{choices_selected}) name of the \code{numeric} column
in \code{plot_dataname} to be used as y-axis.}

\item{subject_var}{(\code{character(1)} or \code{choices_selected}) name of the \code{factor} or \code{character} column
in \code{plot_dataname} to be used as grouping variable for displayed lines/points.}

\item{filter_event_var}{(\code{character(1)} or \code{choices_selected}) name of the \code{factor} or \code{character} column
in \code{plot_dataname} to be used to filter the data.
The plot will be updated with just the filtereed data when the user selects an event from the dropdown menu.}

\item{color_var}{(\code{character(1)} or \code{choices_selected}) name of the \code{factor} or \code{character} column in \code{plot_dataname}
to be used to differentiate colors and symbols.}

\item{point_colors}{(\verb{named character}) valid color names (see \code{\link[=colors]{colors()}}) or hex-colors named
by levels of \code{color_var} column.}

\item{point_symbols}{(\verb{named character}) valid plotly symbol name named  by levels of \code{color_var}
column.}

\item{plot_height}{(\code{numeric}) optional, specifies the plot height as a three-element vector of
\code{value}, \code{min}, and \code{max} intended for use with a slider UI element.}

\item{table_datanames}{(\code{character}) names of the datasets which should be listed below the plot
when some data points are selected. Objects named after \code{table_datanames} will be pulled from
\code{data} so it is important that data actually contains these datasets. Please be aware that
table datasets must be linked with \code{plot_dataname} by the relevant \code{\link[=join_keys]{join_keys()}}.
See section "Decorating Module" below for more details.}
}
\description{
Module visualizes value development in time grouped by subjects.
}
\examples{
data <- teal_data() |>
  within({
    subjects <- data.frame(
      subject_var = c("A", "B", "C"),
      AGE = sample(30:100, 3),
      ARM = c("Combination", "Combination", "Placebo")
    )

    swimlane_ds <- data.frame(
      subject_var = sample(c("A", "B", "C"), 10, replace = TRUE),
      time_var = sample(1:100, 10, replace = TRUE),
      color_var = sample(c("CR", "PR", "SD", "PD"), 10, replace = TRUE)
    )

    spiderplot_ds <- data.frame(
      subject_var = sample(c("A", "B", "C"), 10, replace = TRUE),
      time_var = 1:10,
      filter_event_var = "response",
      color_var = sample(c("CR", "PR", "SD", "PD"), 10, replace = TRUE),
      value_var = sample(-50:100, 10, replace = TRUE)
    )

    waterfall_ds <- data.frame(
      subject_var = sample(c("A", "B", "C"), 10, replace = TRUE),
      value_var = sample(-20:90, 10, replace = TRUE),
      color_var = sample(c("CR", "PR", "SD", "PD"), 10, replace = TRUE)
    )
  })
join_keys(data) <- join_keys(
  join_key("subjects", "spiderplot_ds", keys = c(subject_var = "subject_var"))
)

app <- init(
  data = data,
  modules = modules(
    tm_g_spiderplot(
      plot_dataname = "spiderplot_ds",
      table_datanames = "subjects",
      time_var = "time_var",
      value_var = "value_var",
      subject_var = "subject_var",
      filter_event_var = "filter_event_var",
      color_var = "color_var",
      point_colors = c(
        CR = "#FF0000", PR = "#00FF00", SD = "#0000FF", PD = "#FFFF00"
      ),
      point_symbols = c(
        CR = "circle", PR = "square", SD = "triangle-up", PD = "diamond"
      )
    )
  )
)

if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
