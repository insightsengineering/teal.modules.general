% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_a_regression.R
\name{tm_a_regression}
\alias{tm_a_regression}
\title{Scatterplot and Regression Model}
\usage{
tm_a_regression(
  label = "Regression Analysis",
  regressor,
  response,
  plot_height = c(600, 200, 2000),
  plot_width = NULL,
  alpha = c(1, 0, 1),
  size = c(2, 1, 8),
  ggtheme = gg_themes,
  pre_output = NULL,
  post_output = NULL,
  default_plot_type = 1,
  default_outlier_label = "USUBJID",
  ggplot2_args = teal.devel::ggplot_args(labs = list(), theme = list())
)
}
\arguments{
\item{label}{(\code{character}) Label shown in the navigation item for the module.}

\item{regressor}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Regressor variables from an incoming dataset with filtering and selecting.}

\item{response}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Response variables from an incoming dataset with filtering and selecting.}

\item{plot_height}{optional, (\code{numeric}) A vector of length three with \code{c(value, min and max)}
for a slider encoding the plot height.}

\item{plot_width}{optional, (\code{numeric}) A vector of length three with \code{c(value, min and max)}
for a slider encoding the plot width.}

\item{alpha}{optional, (\code{numeric}) If scalar then the plot points will have a fixed opacity. If a
slider should be presented to adjust the plot point opacity dynamically then it can be a vector of
length three with \code{c(value, min, max)}.}

\item{size}{optional, (\code{numeric}) If scalar then the plot point sizes will have a fixed size
If a slider should be presented to adjust the plot point sizes dynamically then it can be a
vector of length three with \code{c(value, min, max)}.}

\item{ggtheme}{optional, (\code{character}) \code{ggplot} Theme to be used by default.
\code{gg_themes} is defined internally as
\code{c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void", "test")}
All themes can be chosen by the user. Defaults to \code{gray}.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example a title.}

\item{post_output}{optional, \code{shiny.tag} with text placed after the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{default_plot_type}{optional, (\code{numeric}) Defaults to Response vs Regressor.
\enumerate{
\item Response vs Regressor
\item Residuals vs Fitted
\item Normal Q-Q
\item Scale-Location
\item Cook's distance
\item Residuals vs Leverage
\item Cook's dist vs Leverage
}}

\item{default_outlier_label}{optional, (\code{character}) The default column selected to label outliers.}

\item{ggplot2_args}{optional (\code{ggplot_args}) or named list of \code{ggplot_args}.
The \code{teal.devel::ggplot_args()} function has to be used to get a \code{ggplot_args} object.
For global setup a direct usage is recommended, \code{ggplot_args(labs = list(), theme = list())}.
These arguments have a priority over default one for each plot in the module.
When a custom setup for each plot is needed then a named list with \code{ggplot_args},
\code{list( "default" = ggplot_args(labs = list(), theme = list()), "Response vs Regressor" = ggplot_args(labs = list(), theme = list()), ....)}.
The names for each individual plot should follow the list in the \code{default_plot_type} argument description.
The argument is merged with options variable \code{teal.ggplot2_args}.
\code{options} variable is used when we want to share the same setup between different modules.

The priority of argument sources, in order:
\enumerate{
\item \code{ggplot2_args} argument provided by the end user.
For multi-plot case, per plot and then default setup.
\item System variable, \code{options()} variable \code{teal.ggplot2_args}.
\item Module creator setup.
}

Defaults to empty list of the class \code{ggplot2_args}, \code{teal.devel::ggplot_args(labs = list(), theme = list())}.}
}
\description{
Scatterplot and Regression Model
}
\note{
For more examples, please see the vignette "Using regression plots" via
\code{vignette("using-regression-plots", package = "teal.modules.general")}.
}
\examples{
# Regression graphs from selected response variable (BMRKR1) and
# selected regressors (AGE)
library(scda)

ADSL <- synthetic_cdisc_data("latest")$adsl

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL, code = "ADSL <- synthetic_cdisc_data(\"latest\")$adsl"),
    check = TRUE
  ),
  modules = root_modules(
    tm_a_regression(
      label = "Regression",
      response = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = "BMRKR1",
          selected = "BMRKR1",
          multiple = FALSE,
          fixed = TRUE
        )
      ),
      regressor = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variables:",
          choices = variable_choices(ADSL, c("AGE", "SEX", "RACE")),
          selected = "AGE",
          multiple = TRUE,
          fixed = FALSE
        )
      )
    )
  )
)
\dontrun{
shinyApp(app$ui, app$server)
}
}
