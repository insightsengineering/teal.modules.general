% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_a_regression.R
\name{tm_a_regression}
\alias{tm_a_regression}
\title{\code{teal} module: Scatterplot and regression analysis}
\usage{
tm_a_regression(
  label = "Regression Analysis",
  regressor,
  response,
  plot_height = c(600, 200, 2000),
  plot_width = NULL,
  alpha = c(1, 0, 1),
  size = c(2, 1, 8),
  ggtheme = c("gray", "bw", "linedraw", "light", "dark", "minimal", "classic", "void"),
  ggplot2_args = teal.widgets::ggplot2_args(),
  pre_output = NULL,
  post_output = NULL,
  default_plot_type = 1,
  default_outlier_label = "USUBJID",
  label_segment_threshold = c(0.5, 0, 10),
  decorators = list(default = teal_transform_module())
)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module or module group.
For \code{modules()} defaults to \code{"root"}. See \code{Details}.}

\item{regressor}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Regressor variables from an incoming dataset with filtering and selecting.}

\item{response}{(\code{data_extract_spec} or \code{list} of multiple \code{data_extract_spec})
Response variables from an incoming dataset with filtering and selecting.}

\item{plot_height}{(\code{numeric}) optional, specifies the plot height as a three-element vector of
\code{value}, \code{min}, and \code{max} intended for use with a slider UI element.}

\item{plot_width}{(\code{numeric}) optional, specifies the plot width as a three-element vector of
\code{value}, \code{min}, and \code{max} for a slider encoding the plot width.}

\item{alpha}{(\code{integer(1)} or \code{integer(3)}) optional, specifies point opacity.
\itemize{
\item When the length of \code{alpha} is one: the plot points will have a fixed opacity.
\item When the length of \code{alpha} is three: the plot points opacity are dynamically adjusted based on
vector of \code{value}, \code{min}, and \code{max}.
}}

\item{size}{(\code{integer(1)} or \code{integer(3)}) optional, specifies point size.
\itemize{
\item When the length of \code{size} is one: the plot point sizes will have a fixed size.
\item When the length of \code{size} is three: the plot points size are dynamically adjusted based on
vector of \code{value}, \code{min}, and \code{max}.
}}

\item{ggtheme}{(\code{character}) optional, \code{ggplot2} theme to be used by default. Defaults to \code{"gray"}.}

\item{ggplot2_args}{(\code{ggplot2_args}) optional, object created by \code{\link[teal.widgets:ggplot2_args]{teal.widgets::ggplot2_args()}}
with settings for all the plots or named list of \code{ggplot2_args} objects for plot-specific settings.
The argument is merged with options variable \code{teal.ggplot2_args} and default module setup.

List names should match the following: \verb{c("default", "Response vs Regressor", "Residuals vs Fitted", "Scale-Location", "Cook's distance", "Residuals vs Leverage"", "Cook's dist vs Leverage")}.

For more details see the vignette: \code{vignette("custom-ggplot2-arguments", package = "teal.widgets")}.}

\item{pre_output}{(\code{shiny.tag}) optional, text or UI element to be displayed before the module's output,
providing context or a title.
with text placed before the output to put the output into context. For example a title.}

\item{post_output}{(\code{shiny.tag}) optional, text or UI element to be displayed after the module's output,
adding context or further instructions. Elements like \code{shiny::helpText()} are useful.}

\item{default_plot_type}{(\code{numeric}) optional, defaults to "Response vs Regressor".
\enumerate{
\item Response vs Regressor
\item Residuals vs Fitted
\item Normal Q-Q
\item Scale-Location
\item Cook's distance
\item Residuals vs Leverage
\item Cook's dist vs Leverage
}}

\item{default_outlier_label}{(\code{character}) optional, default column selected to label outliers.}

\item{label_segment_threshold}{(\code{numeric(1)} or \code{numeric(3)})
Minimum distance between label and point on the plot that triggers the creation of
a line segment between the two.
This may happen when the label cannot be placed next to the point as it overlaps another
label or point.
The value is used as the \code{min.segment.length} parameter to the \code{\link[ggrepel:geom_text_repel]{ggrepel::geom_text_repel()}} function.

It can take the following forms:
\itemize{
\item \code{numeric(1)}: Fixed value used for the minimum distance and the slider is not presented in the UI.
\item \code{numeric(3)}: A slider is presented in the UI (under "Plot settings") to adjust the minimum distance dynamically.

It takes the form of \code{c(value, min, max)} and it is passed to the \code{value_min_max}
argument in \code{teal.widgets::optionalSliderInputValMinMax}.
}}

\item{decorators}{(\code{list} of \code{teal_transform_module})}
}
\value{
Object of class \code{teal_module} to be used in \code{teal} applications.
}
\description{
Module for visualizing regression analysis, including scatterplots and
various regression diagnostics plots.
It allows users to explore the relationship between a set of regressors and a response variable,
visualize residuals, and identify outliers.
}
\note{
For more examples, please see the vignette "Using regression plots" via
\code{vignette("using-regression-plots", package = "teal.modules.general")}.
}
\section{Decorating Module Outputs}{


Decorating module outputs involves modifying the tables and plots generated by a module. This module provides the
ability to execute custom R code to adjust the visual or structural properties of objects displayed within the
application.

The code specified in \code{\link{teal_transform_module}} is executed prior to rendering the outputs in the application. This
allows developers to modify attributes such as titles, labels, sizes, limits, and other features of rendered tables
and plots. However, decorators should be applied with careful consideration of the module's internal object names
to ensure compatibility.

To customize an output, developers need to identify the name of the table or plot to be modified within the
\code{teal_transform_module}. This requires specifying a \code{server} function that modifies the targeted object in the
\code{data} object (of class \code{teal_data}). Since each module may use different internal object names or types for its
outputs, there is no universal code to achieve this. However, \code{teal} provides convenient wrappers to simplify the
process of decorating module outputs:
\itemize{
\item \strong{Decorator as a Language/Expression}: Specify a simple R expression to modify the object of interest.
For example,\code{plot <- plot + ggtitle("Custom Title")}. The expression must be valid and compatible with the module's
internal environment.
\item \strong{Decorator as a Function}: Provide a function that accepts the output object and modifies it as desired.
When using this approach, the function does not need to align with the moduleâ€™s internal naming conventions for its
objects.
}

For additional details and examples of decorators, refer to the vignette
\code{vignette("decorate-modules-output", package = "teal")} or the \code{\link[=teal_transform_module]{teal_transform_module()}} documentation.
}

\section{Decorating \code{tm_a_regression}}{


This module creates below objects that can be modified with decorators:
\itemize{
\item \code{plot} (\code{ggplot2})#'
}
}

\examples{

footnote_regression <- teal_transform_module(
  server = make_teal_transform_server(expression(
    plot <- plot + labs(caption = deparse(summary(fit)[[1]]))
  ))
)

# general data example
data <- teal_data()
data <- within(data, {
  require(nestcolor)
  CO2 <- CO2
})

app <- init(
  data = data,
  modules = modules(
    tm_a_regression(
      label = "Regression",
      response = data_extract_spec(
        dataname = "CO2",
        select = select_spec(
          label = "Select variable:",
          choices = "uptake",
          selected = "uptake",
          multiple = FALSE,
          fixed = TRUE
        )
      ),
      regressor = data_extract_spec(
        dataname = "CO2",
        select = select_spec(
          label = "Select variables:",
          choices = variable_choices(data[["CO2"]], c("conc", "Treatment")),
          selected = "conc",
          multiple = TRUE,
          fixed = FALSE
        )
      ),
      decorators = footnote_regression
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

# CDISC data example
data <- teal_data()
data <- within(data, {
  require(nestcolor)
  ADSL <- rADSL
})
join_keys(data) <- default_cdisc_join_keys[names(data)]

app <- init(
  data = data,
  modules = modules(
    tm_a_regression(
      label = "Regression",
      response = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variable:",
          choices = "BMRKR1",
          selected = "BMRKR1",
          multiple = FALSE,
          fixed = TRUE
        )
      ),
      regressor = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          label = "Select variables:",
          choices = variable_choices(data[["ADSL"]], c("AGE", "SEX", "RACE")),
          selected = "AGE",
          multiple = TRUE,
          fixed = FALSE
        )
      ),
      decorators = footnote_regression
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
\section{Examples in Shinylive}{
\describe{
  \item{example-1}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokrcQTRIqQje4AfUY4CSDRUSsIA2Muan9SZghRT0YYfz4hEXYlXV1RGR1GXQBeXRgoAGsAmLiEpKIU-zzGAvY4AA9UUPDrbJzdVGpvKP7B0l0Aal1qKHpRdgI0TRJi3X44VBY89lFBGDK2dhNaUjlgYABGAF1LuUVI3VulO6UAYl0pCDVqVahSKF12rABnAlPxfv8jLpqmC-jZQeDhgB3Y4ACxU7BhUFwuhAvSCAEdBLQguxPqJSMRBow7jkAMIAeQATMMGYylABfZ7QdDDFTHLL3TErTG4XrpYRiFbikRzXo5UipKCBYJdCICvp9ab0ODfEoKMBYFViboQfWi+4a0KoEh5YXg-zteLqUiNVBwAjqjV9THQeArfWss1yr15EQaFah90u0Ruj3Br1TGY6-1gADKOqjui0LFoMxEiCDFoTugIKKItAIkr1YEEqD+lULxb6kY0cH4Kdr9ZBeHjXpgwk0wJWADEAIIAGVTznNTZyRzabZWDhcvZyNK9chnXqCIWN9TtfwdbSdGld7s9CZ9sD01cDPaLGpbYxKT7PcYfXq1yer6bDY2zjC5vQMoFves4lmWFZVlmOZ5gEpblpWcyYmcAZMvq1zYnGhAkAQZq6PqdhBL88BkPqtxbk2T6LtWxAWI2s79tQg4iEuTjTqufTzjRuhjpOrgfmuvabr2azEMwpD1KIKyeN4vjkMqu5hBEwbrncdy0CYujsCo5DMJYOg2LYuL3KIaIQKwo7oOwaCoAAJES2K2XZTQFHc7JKGA7KXEAA}{Open in Shinylive}
    \if{html}{\out{<script type="text/javascript">$(function() {  var if_pkgdown = [...document.scripts].filter(x => x.src.includes("pkgdown.js")).length > 0;  if (if_pkgdown) {    $("iframe.iframe_shinylive").css("width", "150\%");  }});</script>}}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokrcQTRIqQje4AfUY4CSDRUSsIA2Muan9SZghRT0YYfz4hEXYlXV1RGR1GXQBeXRgoAGsAmLiEpKIU-zzGAvY4AA9UUPDrbJzdVGpvKP7B0l0Aal1qKHpRdgI0TRJi3X44VBY89lFBGDK2dhNaUjlgYABGAF1LuUVI3VulO6UAYl0pCDVqVahSKF12rABnAlPxfv8jLpqmC-jZQeDhgB3Y4ACxU7BhUFwuhAvSCAEdBLQguxPqJSMRBow7jkAMIAeQATMMGYylABfZ7QdDDFTHLL3TErTG4XrpYRiFbikRzXo5UipKCBYJdCICvp9ab0ODfEoKMBYFViboQfWi+4a0KoEh5YXg-zteLqUiNVBwAjqjV9THQeArfWss1yr15EQaFah90u0Ruj3Br1TGY6-1gADKOqjui0LFoMxEiCDFoTugIKKItAIkr1YEEqD+lULxb6kY0cH4Kdr9ZBeHjXpgwk0wJWADEAIIAGVTznNTZyRzabZWDhcvZyNK9chnXqCIWN9TtfwdbSdGld7s9CZ9sD01cDPaLGpbYxKT7PcYfXq1yer6bDY2zjC5vQMoFves4lmWFZVlmOZ5gEpblpWcyYmcAZMvq1zYnGhAkAQZq6PqdhBL88BkPqtxbk2T6LtWxAWI2s79tQg4iEuTjTqufTzjRuhjpOrgfmuvabr2azEMwpD1KIKyeN4vjkMqu5hBEwbrncdy0CYujsCo5DMJYOg2LYuL3KIaIQKwo7oOwaCoAAJES2K2XZTQFHc7JKGA7KXEAA" style="height: 800px; width: 100\%; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: relative; z-index: 1"></iframe>}}
  }
  \item{example-2}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXQGEAIgEkAZS9dfihSKF04AA9YVBElUPCDYy5qAH1EqBsEsIijXQB3WlIACxV2TNxdECVdXUY4AEdBWgb2CDFSYmoiRkUIOoBBHwCAGWT64bGlAF9+gCsiFTSAazhWUQrc23z+OBMoYVI0gn5aUQI0xeW1jeBoeE3MuQBdN2h0CZVi9lqQ3N0AF5-uFcH8+EIRKIgboIcIxL8BnVdKQYGkoGkGhIGqJRFYIIjkcjqFB6HBqDCFGAsHBsWI8SQqWCkUScagSKI9MDMmloqRmBo0qJUHACISicjMg8uboqVNRky-hLdJyRBoYarRcdhaLxcq6iSyRTgVSAuStbotCxaKSRIhFSz9QQSksCGJKWAAEIAWSwAGksABGB365GajRwfgen3+oMh0Owo60OIygBig1GAWczITploUUjMIcLiVEv6yrkOYlWJxol6MJ5fIF2pFYtLRKlsBlcpGCrw7bD5vVwPDLd1A6JhvJHrNatIluttrE9v7juVztd7uBVsYNvoIhOLtobqeuWAwB70zALxeVTbYEGAHFXHhZWAswANJlvrCDLwvuRKwnQc50LE0H2feNQxgJMUyLJxs2AuoTHzMDdHTTNXDXZFyzLKsO1FXowl6aFgRMIgiFICBKLgTFaVrfFS1w-p+loExdHYFRyGbbQ4BsWwaiRUQyggVhBnQdg0FQAASFoqik6TOUYHQ+lmJQwBmF4gA}{Open in Shinylive}
    \if{html}{\out{<script type="text/javascript">$(function() {  var if_pkgdown = [...document.scripts].filter(x => x.src.includes("pkgdown.js")).length > 0;  if (if_pkgdown) {    $("iframe.iframe_shinylive").css("width", "150\%");  }});</script>}}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMAcwpxm1AJQAdCLTIyoBUrQBucAAQAeALS6AZoIgbaJdnN0AVLAFUAokqUBiXQGEAIgEkAZS9dfihSKF04AA9YVBElUPCDYy5qAH1EqBsEsIijXQB3WlIACxV2TNxdECVdXUY4AEdBWgb2CDFSYmoiRkUIOoBBHwCAGWT64bGlAF9+gCsiFTSAazhWUQrc23z+OBMoYVI0gn5aUQI0xeW1jeBoeE3MuQBdN2h0CZVi9lqQ3N0AF5-uFcH8+EIRKIgboIcIxL8BnVdKQYGkoGkGhIGqJRFYIIjkcjqFB6HBqDCFGAsHBsWI8SQqWCkUScagSKI9MDMmloqRmBo0qJUHACISicjMg8uboqVNRky-hLdJyRBoYarRcdhaLxcq6iSyRTgVSAuStbotCxaKSRIhFSz9QQSksCGJKWAAEIAWSwAGksABGB365GajRwfgen3+oMh0Owo60OIygBig1GAWczITploUUjMIcLiVEv6yrkOYlWJxol6MJ5fIF2pFYtLRKlsBlcpGCrw7bD5vVwPDLd1A6JhvJHrNatIluttrE9v7juVztd7uBVsYNvoIhOLtobqeuWAwB70zALxeVTbYEGAHFXHhZWAswANJlvrCDLwvuRKwnQc50LE0H2feNQxgJMUyLJxs2AuoTHzMDdHTTNXDXZFyzLKsO1FXowl6aFgRMIgiFICBKLgTFaVrfFS1w-p+loExdHYFRyGbbQ4BsWwaiRUQyggVhBnQdg0FQAASFoqik6TOUYHQ+lmJQwBmF4gA" style="height: 800px; width: 100\%; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: relative; z-index: 1"></iframe>}}
  }
}
}

